diff --git a/CMakeLists.txt b/CMakeLists.txt
index f016de2e2..c30a400c7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -383,6 +383,13 @@ set(MFEM_INSTALL_DIR ${CMAKE_INSTALL_PREFIX} CACHE PATH
 
 # Declaring the library
 add_library(mfem ${SOURCES} ${HEADERS} ${MASTER_HEADERS})
+
+# Generate export symbols and add to list of header files
+include(GenerateExportHeader)
+set(_export_header ${CMAKE_CURRENT_SOURCE_DIR}/mfem_export.h)
+generate_export_header(mfem EXPORT_FILE_NAME ${_export_header})
+list(APPEND ${HEADERS} ${_export_header})
+
 # message(STATUS "TPL_LIBRARIES = ${TPL_LIBRARIES}")
 if (CMAKE_VERSION VERSION_GREATER 2.8.11)
   target_link_libraries(mfem PUBLIC ${TPL_LIBRARIES})
@@ -521,7 +528,7 @@ foreach(Header mfem.hpp mfem-performance.hpp)
   install(FILES ${PROJECT_BINARY_DIR}/InstallHeaders/${Header}
     DESTINATION ${INSTALL_INCLUDE_DIR})
 endforeach()
-install(FILES ${MASTER_HEADERS} DESTINATION ${INSTALL_INCLUDE_DIR}/mfem)
+install(FILES ${MASTER_HEADERS} mfem_export.h DESTINATION ${INSTALL_INCLUDE_DIR}/mfem)
 
 # Install the headers; currently, the miniapps headers are excluded
 install(DIRECTORY ${MFEM_SOURCE_DIRS}
diff --git a/fem/fe.hpp b/fem/fe.hpp
index b7b80c4ce..d8c8f93c4 100644
--- a/fem/fe.hpp
+++ b/fem/fe.hpp
@@ -13,6 +13,7 @@
 #define MFEM_FE
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../general/array.hpp"
 #include "../linalg/linalg.hpp"
 #include "intrules.hpp"
@@ -1795,7 +1796,7 @@ public:
    ~Poly_1D();
 };
 
-extern Poly_1D poly1d;
+MFEM_EXPORT extern Poly_1D poly1d;
 
 class TensorBasisElement
 {
diff --git a/fem/geom.hpp b/fem/geom.hpp
index 819814e04..e92b08043 100644
--- a/fem/geom.hpp
+++ b/fem/geom.hpp
@@ -13,6 +13,7 @@
 #define MFEM_GEOM
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../linalg/densemat.hpp"
 #include "intrules.hpp"
 
@@ -116,7 +117,7 @@ template <> struct Geometry::Constants<Geometry::POINT>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::SEGMENT>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::SEGMENT>
 {
    static const int Dimension = 1;
    static const int NumVert = 2;
@@ -128,7 +129,7 @@ template <> struct Geometry::Constants<Geometry::SEGMENT>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::TRIANGLE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::TRIANGLE>
 {
    static const int Dimension = 2;
    static const int NumVert = 3;
@@ -154,7 +155,7 @@ template <> struct Geometry::Constants<Geometry::TRIANGLE>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::SQUARE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::SQUARE>
 {
    static const int Dimension = 2;
    static const int NumVert = 4;
@@ -174,7 +175,7 @@ template <> struct Geometry::Constants<Geometry::SQUARE>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::TETRAHEDRON>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::TETRAHEDRON>
 {
    static const int Dimension = 3;
    static const int NumVert = 4;
@@ -192,7 +193,7 @@ template <> struct Geometry::Constants<Geometry::TETRAHEDRON>
    };
 };
 
-template <> struct Geometry::Constants<Geometry::CUBE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::CUBE>
 {
    static const int Dimension = 3;
    static const int NumVert = 8;
@@ -210,7 +211,7 @@ template <> struct Geometry::Constants<Geometry::CUBE>
    };
 };
 
-template <> struct Geometry::Constants<Geometry::PRISM>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::PRISM>
 {
    static const int Dimension = 3;
    static const int NumVert = 6;
@@ -229,7 +230,7 @@ template <> struct Geometry::Constants<Geometry::PRISM>
 };
 
 // Defined in fe.cpp to ensure construction after 'mfem::WedgeFE'.
-extern Geometry Geometries;
+MFEM_EXPORT extern Geometry Geometries;
 
 
 class RefinedGeometry
@@ -272,7 +273,7 @@ public:
    ~GeometryRefiner();
 };
 
-extern GeometryRefiner GlobGeometryRefiner;
+MFEM_EXPORT extern GeometryRefiner GlobGeometryRefiner;
 
 }
 
diff --git a/fem/intrules.hpp b/fem/intrules.hpp
index c8bd6dcdc..df759eeb7 100644
--- a/fem/intrules.hpp
+++ b/fem/intrules.hpp
@@ -13,6 +13,7 @@
 #define MFEM_INTRULES
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../general/array.hpp"
 
 namespace mfem
@@ -365,10 +366,10 @@ public:
 };
 
 /// A global object with all integration rules (defined in intrules.cpp)
-extern IntegrationRules IntRules;
+MFEM_EXPORT extern IntegrationRules IntRules;
 
 /// A global object with all refined integration rules
-extern IntegrationRules RefinedIntRules;
+MFEM_EXPORT extern IntegrationRules RefinedIntRules;
 
 }
 
diff --git a/general/globals.hpp b/general/globals.hpp
index 076ab579c..b32c624b3 100644
--- a/general/globals.hpp
+++ b/general/globals.hpp
@@ -13,6 +13,7 @@
 #define MFEM_GLOBALS_HPP
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include <iostream>
 
 #ifdef MFEM_USE_MPI
@@ -61,12 +62,12 @@ public:
 /** @brief Global stream used by the library for standard output. Initially it
     uses the same std::streambuf as std::cout, however that can be changed.
     @sa OutStream. */
-extern OutStream out;
+extern MFEM_EXPORT OutStream out;
 /** @brief Global stream used by the library for standard error output.
     Initially it uses the same std::streambuf as std::cerr, however that can be
     changed.
     @sa OutStream. */
-extern OutStream err;
+extern MFEM_EXPORT OutStream err;
 
 
 /** @brief Construct a string of the form "<prefix><myid><suffix>" where the
