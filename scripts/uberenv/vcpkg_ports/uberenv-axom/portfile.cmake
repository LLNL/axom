if(VCPKG_CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
    message(FATAL_ERROR "${PORT} does not currently support UWP")
endif()

include(vcpkg_common_functions)

message(STATUS "Building dependencies for Axom")

message(STATUS "CURRENT_INSTALLED_DIR -- ${CURRENT_INSTALLED_DIR}")
message(STATUS "PORT -- ${PORT}")

set(_copyright [=[
Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and
other Axom Project Developers. See the top-level COPYRIGHT file for details.

SPDX-License-Identifier: (BSD-3-Clause)
]=])

set(_host-config_hdr [=[
#------------------------------------------------------------------------------
# !!!! This is a generated file, edit at own risk !!!!
#------------------------------------------------------------------------------
# Copyright (c) 2017-2019, Lawrence Livermore National Security, LLC and
# other Axom Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
#------------------------------------------------------------------------------
# Host-config generated by vcpkg
#
# Port: @PORT@
# Architecture: @VCPKG_TARGET_ARCHITECTURE@
# Platform toolset: @VCPKG_PLATFORM_TOOLSET@
#
# vcpkg root path: @VCPKG_ROOT_PATH@
# vcpkg target triple: @TARGET_TRIPLET@
# vcpkg target triple file: @TARGET_TRIPLET_FILE@
#
# CMake system name: @CMAKE_SYSTEM_NAME@
# CMake system version: @CMAKE_SYSTEM_VERSION@
#------------------------------------------------------------------------------
# Empty/useless variables:
#   VS path: @VCPKG_VISUAL_STUDIO_PATH@
#   VC Package root: @VCPKG_ROOT@
#   Linkage: @VCPKG_CRT_LINKAGE@
#   Library linkage: @VCPKG_CRT_LINKAGE@
#   CMake system name: @VCPKG_CMAKE_SYSTEM_NAME@
#   CMake system version: @VCPKG_CMAKE_SYSTEM_VERSION@
#------------------------------------------------------------------------------
# To configure the code using the vcpkg toolchain:
#   cmake -C @_hc_file@ ../src
#
# To build the code through the command line:
#   cmake --build . --target ALL_BUILD --config Debug  [ -- -m:8 [-v:m] ]  
#
# To run tests, run either:
#   cmake --build . --target RUN_TESTS --config Debug
#   ctest -C Debug [-j8]
#------------------------------------------------------------------------------

# Toolchain file
set(CMAKE_TOOLCHAIN_FILE @VCPKG_ROOT_PATH@/scripts/buildsystems/vcpkg.cmake CACHE FILEPATH "")
set(VCPKG_TARGET_TRIPLET @TARGET_TRIPLET@ CACHE STRING "")

# Set TPLs
set(CONDUIT_DIR @CURRENT_INSTALLED_DIR@/share/conduit CACHE PATH "")

# Axom options
set(AXOM_ENABLE_TESTS ON CACHE BOOL "")
set(AXOM_ENABLE_DOCS OFF CACHE BOOL "")
set(AXOM_ENABLE_EXAMPLES ON CACHE BOOL "")
# set(AXOM_ENABLE_SIDRE OFF CACHE BOOL "")

# BLT options
set(ENABLE_MPI ON CACHE BOOL "")
set(ENABLE_FORTRAN OFF CACHE BOOL "")
set(ENABLE_FOLDERS ON CACHE BOOL "")
set(ENABLE_GTEST_DEATH_TESTS ON CACHE BOOL "")

# cmake options
set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE BOOL "")

# TODO:
#  * Add TPLs: conduit, hdf5, mfem, umpire, raja
#  * Add MPI
#  * Add tools: uncrustify, sphinx, doxygen

# DONE:
#  * Add vcpkg toolchain file -- CMAKE_TOOLCHAIN_FILE
#  * Set vcpkg triplet -- VCPKG_TARGET_TRIPLET 

]=])

# Create a copyright file
file(MAKE_DIRECTORY ${CURRENT_PACKAGES_DIR}/share/${PORT} )
set(_copyright_file ${CURRENT_PACKAGES_DIR}/share/${PORT}/copyright)
file(WRITE ${_copyright_file} "${_copyright}")

# Create a host-config file
file(MAKE_DIRECTORY ${CURRENT_PACKAGES_DIR}/include/${PORT} )
set(_hc_file ${CURRENT_PACKAGES_DIR}/include/${PORT}/hc.cmake)

file(WRITE ${_hc_file}.in ${_host-config_hdr})
configure_file(${_hc_file}.in ${_hc_file} @ONLY)

# print out generated hc to status
file(READ ${_hc_file} _hc_contents)
message(STATUS "Host config contents: \n ${_hc_contents}")


message(STATUS "****************************************")
message(STATUS "Printing all cmake variables: ")

get_cmake_property(_variableNames VARIABLES)
list (SORT _variableNames)
foreach (_variableName ${_variableNames})
    message(STATUS "${_variableName}=${${_variableName}}")
endforeach()

message(STATUS "****************************************")
