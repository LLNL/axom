diff --git a/CMakeLists.txt b/CMakeLists.txt
index 25cf0a6..118f4b5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -444,6 +444,13 @@ set(MFEM_INSTALL_DIR ${CMAKE_INSTALL_PREFIX} CACHE PATH
 
 # Declaring the library
 add_library(mfem ${SOURCES} ${HEADERS} ${MASTER_HEADERS})
+
+# Generate export symbols and add to list of header files
+include(GenerateExportHeader)
+set(_export_header ${CMAKE_CURRENT_SOURCE_DIR}/mfem_export.h)
+generate_export_header(mfem EXPORT_FILE_NAME ${_export_header})
+list(APPEND ${HEADERS} ${_export_header})
+
 # message(STATUS "TPL_LIBRARIES = ${TPL_LIBRARIES}")
 if (CMAKE_VERSION VERSION_GREATER 2.8.11)
   target_link_libraries(mfem PUBLIC ${TPL_LIBRARIES})
@@ -582,7 +589,7 @@ foreach(Header mfem.hpp mfem-performance.hpp)
   install(FILES ${PROJECT_BINARY_DIR}/InstallHeaders/${Header}
     DESTINATION ${INSTALL_INCLUDE_DIR})
 endforeach()
-install(FILES ${MASTER_HEADERS} DESTINATION ${INSTALL_INCLUDE_DIR}/mfem)
+install(FILES ${MASTER_HEADERS} mfem_export.h DESTINATION ${INSTALL_INCLUDE_DIR}/mfem)
 
 # Install the headers; currently, the miniapps headers are excluded
 install(DIRECTORY ${MFEM_SOURCE_DIRS}
diff --git a/fem/fe.hpp b/fem/fe.hpp
index bbd956c..4c55f97 100644
--- a/fem/fe.hpp
+++ b/fem/fe.hpp
@@ -13,6 +13,7 @@
 #define MFEM_FE
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../general/array.hpp"
 #include "../linalg/linalg.hpp"
 #include "intrules.hpp"
@@ -1994,7 +1995,7 @@ public:
    ~Poly_1D();
 };
 
-extern Poly_1D poly1d;
+MFEM_EXPORT extern Poly_1D poly1d;
 
 
 /// An element defined as an ND tensor product of 1D elements on a segment,
diff --git a/fem/geom.hpp b/fem/geom.hpp
index 6a4dfce..df7fcab 100644
--- a/fem/geom.hpp
+++ b/fem/geom.hpp
@@ -13,6 +13,7 @@
 #define MFEM_GEOM
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../linalg/densemat.hpp"
 #include "intrules.hpp"
 
@@ -106,7 +107,7 @@ public:
    int NumBdr(int GeomType) { return NumBdrArray[GeomType]; }
 };
 
-template <> struct Geometry::Constants<Geometry::POINT>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::POINT>
 {
    static const int Dimension = 0;
    static const int NumVert = 1;
@@ -116,7 +117,7 @@ template <> struct Geometry::Constants<Geometry::POINT>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::SEGMENT>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::SEGMENT>
 {
    static const int Dimension = 1;
    static const int NumVert = 2;
@@ -128,7 +129,7 @@ template <> struct Geometry::Constants<Geometry::SEGMENT>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::TRIANGLE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::TRIANGLE>
 {
    static const int Dimension = 2;
    static const int NumVert = 3;
@@ -154,7 +155,7 @@ template <> struct Geometry::Constants<Geometry::TRIANGLE>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::SQUARE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::SQUARE>
 {
    static const int Dimension = 2;
    static const int NumVert = 4;
@@ -174,7 +175,7 @@ template <> struct Geometry::Constants<Geometry::SQUARE>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::TETRAHEDRON>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::TETRAHEDRON>
 {
    static const int Dimension = 3;
    static const int NumVert = 4;
@@ -196,7 +197,7 @@ template <> struct Geometry::Constants<Geometry::TETRAHEDRON>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::CUBE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::CUBE>
 {
    static const int Dimension = 3;
    static const int NumVert = 8;
@@ -214,7 +215,7 @@ template <> struct Geometry::Constants<Geometry::CUBE>
    };
 };
 
-template <> struct Geometry::Constants<Geometry::PRISM>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::PRISM>
 {
    static const int Dimension = 3;
    static const int NumVert = 6;
@@ -233,7 +234,7 @@ template <> struct Geometry::Constants<Geometry::PRISM>
 };
 
 // Defined in fe.cpp to ensure construction after 'mfem::WedgeFE'.
-extern Geometry Geometries;
+MFEM_EXPORT extern Geometry Geometries;
 
 
 class RefinedGeometry
@@ -282,7 +283,7 @@ public:
    ~GeometryRefiner();
 };
 
-extern GeometryRefiner GlobGeometryRefiner;
+MFEM_EXPORT extern GeometryRefiner GlobGeometryRefiner;
 
 }
 
diff --git a/fem/intrules.hpp b/fem/intrules.hpp
index 49c33a1..f11210a 100644
--- a/fem/intrules.hpp
+++ b/fem/intrules.hpp
@@ -13,6 +13,7 @@
 #define MFEM_INTRULES
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../general/array.hpp"
 
 namespace mfem
@@ -375,10 +376,10 @@ public:
 };
 
 /// A global object with all integration rules (defined in intrules.cpp)
-extern IntegrationRules IntRules;
+MFEM_EXPORT extern IntegrationRules IntRules;
 
 /// A global object with all refined integration rules
-extern IntegrationRules RefinedIntRules;
+MFEM_EXPORT extern IntegrationRules RefinedIntRules;
 
 }
 
diff --git a/general/device.hpp b/general/device.hpp
index 1c702c8..b4b8a59 100644
--- a/general/device.hpp
+++ b/general/device.hpp
@@ -12,6 +12,8 @@
 #ifndef MFEM_DEVICE_HPP
 #define MFEM_DEVICE_HPP
 
+#include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "globals.hpp"
 #include "mem_manager.hpp"
 
@@ -115,7 +117,7 @@ struct Backend
       priority order is used to select a specific backend from the list of
       configured backends. See the Backend class and the Configure() method in
       this class for details. */
-class Device
+MFEM_EXPORT class Device
 {
 private:
    friend class MemoryManager;
diff --git a/general/globals.hpp b/general/globals.hpp
index 9b14b53..f2efd8e 100644
--- a/general/globals.hpp
+++ b/general/globals.hpp
@@ -13,6 +13,7 @@
 #define MFEM_GLOBALS_HPP
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include <iostream>
 
 #ifdef MFEM_USE_MPI
@@ -63,12 +64,12 @@ public:
 /** @brief Global stream used by the library for standard output. Initially it
     uses the same std::streambuf as std::cout, however that can be changed.
     @sa OutStream. */
-extern OutStream out;
+MFEM_EXPORT extern OutStream out;
 /** @brief Global stream used by the library for standard error output.
     Initially it uses the same std::streambuf as std::cerr, however that can be
     changed.
     @sa OutStream. */
-extern OutStream err;
+MFEM_EXPORT extern OutStream err;
 
 
 /** @brief Construct a string of the form "<prefix><myid><suffix>" where the
diff --git a/general/mem_manager.hpp b/general/mem_manager.hpp
index 5661d33..dfb3cd2 100644
--- a/general/mem_manager.hpp
+++ b/general/mem_manager.hpp
@@ -12,6 +12,8 @@
 #ifndef MFEM_MEM_MANAGER_HPP
 #define MFEM_MEM_MANAGER_HPP
 
+#include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "globals.hpp"
 #include "error.hpp"
 #include <cstring> // std::memcpy
@@ -474,7 +476,7 @@ private:
 /** The MFEM memory manager class. Host-side pointers are inserted into this
     manager which keeps track of the associated device pointer, and where the
     data currently resides. */
-class MemoryManager
+class MFEM_EXPORT MemoryManager
 {
 private:
 
