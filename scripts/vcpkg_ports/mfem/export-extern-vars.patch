diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7b159ff..e178687 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -529,6 +529,12 @@ endif()
 set_target_properties(mfem PROPERTIES VERSION "${mfem_VERSION}")
 set_target_properties(mfem PROPERTIES SOVERSION "${mfem_VERSION}")
 
+# Generate export symbols and add to list of header files
+include(GenerateExportHeader)
+set(_export_header ${CMAKE_CURRENT_SOURCE_DIR}/mfem_export.h)
+generate_export_header(mfem EXPORT_FILE_NAME ${_export_header})
+list(APPEND ${HEADERS} ${_export_header})
+
 # If building out-of-source, define MFEM_CONFIG_FILE to point to the config file
 # inside the build directory.
 if (NOT ("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}"))
@@ -669,7 +675,7 @@ foreach(Header mfem.hpp mfem-performance.hpp)
   install(FILES ${PROJECT_BINARY_DIR}/InstallHeaders/${Header}
     DESTINATION ${INSTALL_INCLUDE_DIR})
 endforeach()
-install(FILES ${MASTER_HEADERS} DESTINATION ${INSTALL_INCLUDE_DIR}/mfem)
+install(FILES ${MASTER_HEADERS} mfem_export.h DESTINATION ${INSTALL_INCLUDE_DIR}/mfem)
 
 # Install the headers; currently, the miniapps headers are excluded
 install(DIRECTORY ${MFEM_SOURCE_DIRS}
diff --git a/fem/fe.hpp b/fem/fe.hpp
index 5de8ee5..3738007 100644
--- a/fem/fe.hpp
+++ b/fem/fe.hpp
@@ -13,6 +13,7 @@
 #define MFEM_FE
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../general/array.hpp"
 #include "../linalg/linalg.hpp"
 
diff --git a/fem/fe/fe_base.hpp b/fem/fe/fe_base.hpp
index 0d6d440..1774791 100644
--- a/fem/fe/fe_base.hpp
+++ b/fem/fe/fe_base.hpp
@@ -1146,7 +1146,7 @@ public:
    ~Poly_1D();
 };
 
-extern Poly_1D poly1d;
+MFEM_EXPORT extern Poly_1D poly1d;
 
 
 /// An element defined as an ND tensor product of 1D elements on a segment,
diff --git a/fem/geom.hpp b/fem/geom.hpp
index bdcf6cc..599a28c 100644
--- a/fem/geom.hpp
+++ b/fem/geom.hpp
@@ -13,6 +13,7 @@
 #define MFEM_GEOM
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../linalg/densemat.hpp"
 #include "intrules.hpp"
 
@@ -126,7 +127,7 @@ public:
    int NumBdr(int GeomType) { return NumBdrArray[GeomType]; }
 };
 
-template <> struct Geometry::Constants<Geometry::POINT>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::POINT>
 {
    static const int Dimension = 0;
    static const int NumVert = 1;
@@ -136,7 +137,7 @@ template <> struct Geometry::Constants<Geometry::POINT>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::SEGMENT>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::SEGMENT>
 {
    static const int Dimension = 1;
    static const int NumVert = 2;
@@ -148,7 +149,7 @@ template <> struct Geometry::Constants<Geometry::SEGMENT>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::TRIANGLE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::TRIANGLE>
 {
    static const int Dimension = 2;
    static const int NumVert = 3;
@@ -174,7 +175,7 @@ template <> struct Geometry::Constants<Geometry::TRIANGLE>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::SQUARE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::SQUARE>
 {
    static const int Dimension = 2;
    static const int NumVert = 4;
@@ -194,7 +195,7 @@ template <> struct Geometry::Constants<Geometry::SQUARE>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::TETRAHEDRON>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::TETRAHEDRON>
 {
    static const int Dimension = 3;
    static const int NumVert = 4;
@@ -216,7 +217,7 @@ template <> struct Geometry::Constants<Geometry::TETRAHEDRON>
    static const int InvOrient[NumOrient];
 };
 
-template <> struct Geometry::Constants<Geometry::CUBE>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::CUBE>
 {
    static const int Dimension = 3;
    static const int NumVert = 8;
@@ -234,7 +235,7 @@ template <> struct Geometry::Constants<Geometry::CUBE>
    };
 };
 
-template <> struct Geometry::Constants<Geometry::PRISM>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::PRISM>
 {
    static const int Dimension = 3;
    static const int NumVert = 6;
@@ -252,7 +253,7 @@ template <> struct Geometry::Constants<Geometry::PRISM>
    };
 };
 
-template <> struct Geometry::Constants<Geometry::PYRAMID>
+template <> struct MFEM_EXPORT Geometry::Constants<Geometry::PYRAMID>
 {
    static const int Dimension = 3;
    static const int NumVert = 5;
@@ -272,7 +273,7 @@ template <> struct Geometry::Constants<Geometry::PYRAMID>
 
 // Defined in fe.cpp to ensure construction after 'mfem::TriangleFE' and
 // `mfem::TetrahedronFE`.
-extern Geometry Geometries;
+MFEM_EXPORT extern Geometry Geometries;
 
 
 class RefinedGeometry
@@ -321,7 +322,7 @@ public:
    ~GeometryRefiner();
 };
 
-extern GeometryRefiner GlobGeometryRefiner;
+MFEM_EXPORT extern GeometryRefiner GlobGeometryRefiner;
 
 }
 
diff --git a/fem/intrules.hpp b/fem/intrules.hpp
index 3545701..fd68a9a 100644
--- a/fem/intrules.hpp
+++ b/fem/intrules.hpp
@@ -13,6 +13,7 @@
 #define MFEM_INTRULES
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "../general/array.hpp"
 
 namespace mfem
@@ -376,10 +377,10 @@ public:
 };
 
 /// A global object with all integration rules (defined in intrules.cpp)
-extern IntegrationRules IntRules;
+MFEM_EXPORT extern IntegrationRules IntRules;
 
 /// A global object with all refined integration rules
-extern IntegrationRules RefinedIntRules;
+MFEM_EXPORT extern IntegrationRules RefinedIntRules;
 
 }
 
diff --git a/general/device.cpp b/general/device.cpp
index 0f8d607..858473a 100644
--- a/general/device.cpp
+++ b/general/device.cpp
@@ -61,7 +61,6 @@ static const char *backend_name[Backend::NUM_BACKENDS] =
 
 
 // Initialize the unique global Device variable.
-Device Device::device_singleton;
 bool Device::device_env = false;
 bool Device::mem_host_env = false;
 bool Device::mem_device_env = false;
@@ -177,6 +176,12 @@ Device::~Device()
    Get().device_mem_class = MemoryClass::HOST;
 }
 
+Device& Device::Get() 
+{ 
+   static Device device_singleton;
+   return device_singleton; 
+}
+
 void Device::Configure(const std::string &device, const int device_id)
 {
    // If a device was configured via the environment, skip the configuration,
diff --git a/general/device.hpp b/general/device.hpp
index 456d3cc..e2b75b3 100644
--- a/general/device.hpp
+++ b/general/device.hpp
@@ -12,6 +12,8 @@
 #ifndef MFEM_DEVICE_HPP
 #define MFEM_DEVICE_HPP
 
+#include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "globals.hpp"
 #include "mem_manager.hpp"
 
@@ -125,7 +127,6 @@ private:
    enum MODES {SEQUENTIAL, ACCELERATED};
 
    static bool device_env, mem_host_env, mem_device_env, mem_types_set;
-   static Device device_singleton;
 
    MODES mode = Device::SEQUENTIAL;
    int dev = 0;   ///< Device ID of the configured device.
@@ -147,7 +148,9 @@ private:
    char *device_option = NULL;
    Device(Device const&);
    void operator=(Device const&);
-   static Device& Get() { return device_singleton; }
+
+   /// Return unique global Device variable 
+   static Device& Get();
 
    /// Setup switcher based on configuration settings
    void Setup(const int device_id = 0);
diff --git a/general/globals.hpp b/general/globals.hpp
index c21b869..d860fbf 100644
--- a/general/globals.hpp
+++ b/general/globals.hpp
@@ -13,6 +13,7 @@
 #define MFEM_GLOBALS_HPP
 
 #include "../config/config.hpp"
+#include "../mfem_export.h"
 #include <iostream>
 
 #ifdef MFEM_USE_MPI
@@ -63,12 +64,12 @@ public:
 /** @brief Global stream used by the library for standard output. Initially it
     uses the same std::streambuf as std::cout, however that can be changed.
     @sa OutStream. */
-extern OutStream out;
+MFEM_EXPORT extern OutStream out;
 /** @brief Global stream used by the library for standard error output.
     Initially it uses the same std::streambuf as std::cerr, however that can be
     changed.
     @sa OutStream. */
-extern OutStream err;
+MFEM_EXPORT extern OutStream err;
 
 
 /** @brief Construct a string of the form "<prefix><myid><suffix>" where the
diff --git a/general/mem_manager.hpp b/general/mem_manager.hpp
index d73bb18..7d3337d 100644
--- a/general/mem_manager.hpp
+++ b/general/mem_manager.hpp
@@ -12,6 +12,8 @@
 #ifndef MFEM_MEM_MANAGER_HPP
 #define MFEM_MEM_MANAGER_HPP
 
+#include "../config/config.hpp"
+#include "../mfem_export.h"
 #include "globals.hpp"
 #include "error.hpp"
 #include <cstring> // std::memcpy
@@ -553,7 +555,7 @@ private:
 /** The MFEM memory manager class. Host-side pointers are inserted into this
     manager which keeps track of the associated device pointer, and where the
     data currently resides. */
-class MemoryManager
+class MFEM_EXPORT MemoryManager
 {
 private:
 
@@ -1226,7 +1228,7 @@ inline int Memory<T>::CompareHostAndDevice(int size) const
 
 
 /// The (single) global memory manager object
-extern MemoryManager mm;
+extern MFEM_EXPORT MemoryManager mm;
 
 } // namespace mfem
 
