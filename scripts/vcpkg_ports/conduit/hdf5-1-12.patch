diff --git a/src/libs/relay/conduit_relay_io_hdf5.cpp b/src/libs/relay/conduit_relay_io_hdf5.cpp
index 4f9be55..599f001 100644
--- a/src/libs/relay/conduit_relay_io_hdf5.cpp
+++ b/src/libs/relay/conduit_relay_io_hdf5.cpp
@@ -845,7 +845,11 @@ check_if_conduit_leaf_is_compatible_with_hdf5_obj(const DataType &dtype,
     bool res = true;
     H5O_info_t h5_obj_info;
 
+#if H5_VERSION_GE(1, 12, 0)
+    herr_t h5_status = H5Oget_info(hdf5_id, &h5_obj_info, H5O_INFO_ALL);
+#else
     herr_t h5_status = H5Oget_info(hdf5_id, &h5_obj_info);
+#endif
 
     // make sure it is a dataset ...
     if( CONDUIT_HDF5_STATUS_OK(h5_status) &&
@@ -985,7 +989,11 @@ check_if_conduit_object_is_compatible_with_hdf5_tree(const Node &node,
     // make sure we have a group ...
 
     H5O_info_t h5_obj_info;
+#if H5_VERSION_GE(1, 12, 0)
+    herr_t h5_status = H5Oget_info(hdf5_id, &h5_obj_info, H5O_INFO_ALL);
+#else
     herr_t h5_status = H5Oget_info(hdf5_id, &h5_obj_info);
+#endif
 
     // make sure it is a group ...
     if( CONDUIT_HDF5_STATUS_OK(h5_status) &&
@@ -1055,7 +1063,11 @@ check_if_conduit_list_is_compatible_with_hdf5_tree(const Node &node,
     // make sure we have a group ...
 
     H5O_info_t h5_obj_info;
+#if H5_VERSION_GE(1, 12, 0)
+    herr_t h5_status = H5Oget_info(hdf5_id, &h5_obj_info, H5O_INFO_ALL);
+#else
     herr_t h5_status = H5Oget_info(hdf5_id, &h5_obj_info);
+#endif
 
     // make sure it is a group ...
     if( CONDUIT_HDF5_STATUS_OK(h5_status) &&
@@ -1727,10 +1739,18 @@ write_conduit_leaf_to_hdf5_group(const Node &node,
 
     // check if the dataset exists
     H5O_info_t h5_obj_info;
+#if H5_VERSION_GE(1, 12, 0)
     herr_t h5_info_status =  H5Oget_info_by_name(hdf5_group_id,
                                                  hdf5_dset_name.c_str(),
                                                  &h5_obj_info,
+                                                 H5O_INFO_ALL,
                                                  H5P_DEFAULT);
+#else
+    herr_t h5_info_status =  H5Oget_info_by_name(hdf5_group_id,
+                                                 hdf5_dset_name.c_str(),
+                                                 &h5_obj_info,
+                                                 H5P_DEFAULT);
+#endif
 
     hid_t h5_child_id = -1;
 
@@ -1799,10 +1819,18 @@ write_conduit_empty_to_hdf5_group(hid_t hdf5_group_id,
 
     // check if the dataset exists
     H5O_info_t h5_obj_info;
+#if H5_VERSION_GE(1, 12, 0)
     herr_t h5_info_status =  H5Oget_info_by_name(hdf5_group_id,
                                                  hdf5_dset_name.c_str(),
                                                  &h5_obj_info,
+                                                 H5O_INFO_ALL,
                                                  H5P_DEFAULT);
+#else
+    herr_t h5_info_status =  H5Oget_info_by_name(hdf5_group_id,
+                                                 hdf5_dset_name.c_str(),
+                                                 &h5_obj_info,
+                                                 H5P_DEFAULT);
+#endif
 
     hid_t h5_child_id = -1;
 
@@ -1904,10 +1932,18 @@ write_conduit_node_children_to_hdf5_group(const Node &node,
             // check if the HDF5 group has child with same name
             // as the node's child
             H5O_info_t h5_obj_info;
+#if H5_VERSION_GE(1, 12, 0)
             herr_t h5_info_status =  H5Oget_info_by_name(hdf5_group_id,
                                                          child_name.c_str(),
                                                          &h5_obj_info,
+                                                         H5O_INFO_ALL,
                                                          H5P_DEFAULT);
+#else
+            herr_t h5_info_status =  H5Oget_info_by_name(hdf5_group_id,
+                                                         child_name.c_str(),
+                                                         &h5_obj_info,
+                                                         H5P_DEFAULT);
+#endif
 
             hid_t h5_child_id = -1;
 
@@ -2127,7 +2163,11 @@ struct h5_read_opdata
 {
     unsigned                recurs;      /* Recursion level.  0=root */
     struct h5_read_opdata   *prev;        /* Pointer to previous opdata */
+#if H5_VERSION_GE(1, 12, 0)
+    H5O_token_t            *token;       /* Group token */
+#else
     haddr_t                 addr;        /* Group address */
+#endif
 
     // pointer to conduit node, anchors traversal to
     Node            *node;
@@ -2148,6 +2188,40 @@ struct h5_read_opdata
 //  target_addr.  Returns 1 if a match is found, and 0
 //  otherwise.
 //---------------------------------------------------------------------------//
+
+//---------------------------------------------------------------------------//
+// -- hdf5 1.12 implementation
+//---------------------------------------------------------------------------//
+#if H5_VERSION_GE(1, 12, 0)
+int
+h5_group_check(h5_read_opdata *od,
+               hid_t h5_id,
+               H5O_token_t *target_token)
+{
+
+    int cmp = -1;
+    H5Otoken_cmp(h5_id, od->token, target_token, &cmp);
+
+    if (cmp == 0)
+    {
+        /* Addresses match */
+        return 1;
+    }
+    else if (!od->recurs)
+    {
+        /* Root group reached with no matches */
+        return 0;
+    }
+    else
+    {
+        /* Recursively examine the next node */
+        return h5_group_check(od->prev, h5_id, target_token);
+    }
+}
+#else
+//---------------------------------------------------------------------------//
+// -- pre hdf5 1.12 implementation
+//---------------------------------------------------------------------------//
 int
 h5_group_check(h5_read_opdata *od,
                haddr_t target_addr)
@@ -2168,7 +2242,7 @@ h5_group_check(h5_read_opdata *od,
         return h5_group_check(od->prev, target_addr);
     }
 }
-
+#endif
 
 //---------------------------------------------------------------------------//
 Node *
@@ -2244,10 +2318,18 @@ h5l_iterate_traverse_op_func(hid_t hdf5_id,
      * The name of the object is passed to this function by
      * the Library.
      */
+#if H5_VERSION_GE(1, 12, 0)
     h5_status = H5Oget_info_by_name(hdf5_id,
                                     hdf5_path,
                                     &h5_info_buf,
+                                    H5O_INFO_ALL,
                                     H5P_DEFAULT);
+#else
+    h5_status = H5Oget_info_by_name(hdf5_id,
+                                    hdf5_path,
+                                    &h5_info_buf,
+                                    H5P_DEFAULT);
+#endif
 
     CONDUIT_CHECK_HDF5_ERROR_WITH_FILE_AND_REF_PATH(h5_status,
                                                     hdf5_id,
@@ -2267,6 +2349,13 @@ h5l_iterate_traverse_op_func(hid_t hdf5_id,
     {
         case H5O_TYPE_GROUP:
         {
+#if H5_VERSION_GE(1, 12, 0)
+            /*
+             * With 1.12, we compare tokens, with the hope this provides
+             * the same cycle avoidance.
+             */
+            if ( h5_group_check (h5_od, hdf5_id, &h5_info_buf.token) )
+#else
             /*
              * Check group address against linked list of operator
              * data structures.  We will always run the check, as the
@@ -2279,6 +2368,7 @@ h5l_iterate_traverse_op_func(hid_t hdf5_id,
              * H5Odecr_refcount.
              */
             if ( h5_group_check (h5_od, h5_info_buf.addr) )
+#endif
             {
                 // skip cycles in the graph ...
             }
@@ -2372,8 +2462,14 @@ read_hdf5_group_into_conduit_node(hid_t hdf5_group_id,
 {
     // get info, we need to get the obj addr for cycle tracking
     H5O_info_t h5_info_buf;
+#if H5_VERSION_GE(1, 12, 0)
+    herr_t h5_status = H5Oget_info(hdf5_group_id,
+                                   &h5_info_buf,
+                                   H5O_INFO_ALL);
+#else
     herr_t h5_status = H5Oget_info(hdf5_group_id,
                                    &h5_info_buf);
+#endif 
 
     // Check if this is a list or an object case
     if(check_if_hdf5_group_has_conduit_list_attribute(hdf5_group_id,
@@ -2393,7 +2489,11 @@ read_hdf5_group_into_conduit_node(hid_t hdf5_group_id,
     // setup linked list tracking that allows us to detect cycles
     h5_od.recurs = 0;
     h5_od.prev = NULL;
+#if H5_VERSION_GE(1, 12, 0)
+    h5_od.token = &h5_info_buf.token;
+#else
     h5_od.addr = h5_info_buf.addr;
+#endif
     // attach the pointer to our node
     h5_od.node = &dest;
     h5_od.opts = &opts;
@@ -2715,7 +2815,11 @@ read_hdf5_tree_into_conduit_node(hid_t hdf5_id,
     herr_t     h5_status = 0;
     H5O_info_t h5_info_buf;
 
+#if H5_VERSION_GE(1, 12, 0)
+    h5_status = H5Oget_info(hdf5_id,&h5_info_buf,H5O_INFO_ALL);
+#else
     h5_status = H5Oget_info(hdf5_id,&h5_info_buf);
+#endif 
 
     CONDUIT_CHECK_HDF5_ERROR_WITH_FILE_AND_REF_PATH(h5_status,
                                                     hdf5_id,
@@ -3679,10 +3783,18 @@ void hdf5_group_list_child_names(hid_t hdf5_id,
     H5O_info_t h5_info_buf;
 
     // Get type of the object
+#if H5_VERSION_GE(1, 12, 0)
     herr_t h5_status = H5Oget_info_by_name(hdf5_id,
                                            hdf5_path.c_str(),
                                            &h5_info_buf,
+                                           H5O_INFO_ALL,
                                            H5P_DEFAULT);
+#else
+    herr_t h5_status = H5Oget_info_by_name(hdf5_id,
+                                           hdf5_path.c_str(),
+                                           &h5_info_buf,
+                                           H5P_DEFAULT);
+#endif
 
     CONDUIT_CHECK_HDF5_ERROR_WITH_FILE_AND_REF_PATH(h5_status,
                                                     hdf5_id,
