// wrapBuffer.cpp
// This file is generated by Shroud 0.13.0. Do not edit.
//
// Copyright (c) 2017-2024, Lawrence Livermore National Security, LLC and
// other Axom Project Developers. See the top-level LICENSE file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)

#include "axom/sidre/core/Buffer.hpp"
#include "wrapBuffer.h"

// splicer begin class.Buffer.CXX_definitions
// splicer end class.Buffer.CXX_definitions

extern "C" {

// splicer begin class.Buffer.C_definitions
// splicer end class.Buffer.C_definitions

SIDRE_IndexType SIDRE_Buffer_get_index(const SIDRE_Buffer *self)
{
  const axom::sidre::Buffer *SH_this =
    static_cast<const axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.getIndex
  axom::sidre::IndexType SHC_rv = SH_this->getIndex();
  return SHC_rv;
  // splicer end class.Buffer.method.getIndex
}

size_t SIDRE_Buffer_get_num_views(const SIDRE_Buffer *self)
{
  const axom::sidre::Buffer *SH_this =
    static_cast<const axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.getNumViews
  size_t SHC_rv = SH_this->getNumViews();
  return SHC_rv;
  // splicer end class.Buffer.method.getNumViews
}

void *SIDRE_Buffer_get_void_ptr(SIDRE_Buffer *self)
{
  axom::sidre::Buffer *SH_this = static_cast<axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.getVoidPtr
  void *SHC_rv = SH_this->getVoidPtr();
  return SHC_rv;
  // splicer end class.Buffer.method.getVoidPtr
}

SIDRE_TypeIDint SIDRE_Buffer_get_type_id(const SIDRE_Buffer *self)
{
  const axom::sidre::Buffer *SH_this =
    static_cast<const axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.getTypeID
  axom::sidre::TypeID SHCXX_rv = SH_this->getTypeID();
  SIDRE_TypeIDint SHC_rv = static_cast<SIDRE_TypeIDint>(SHCXX_rv);
  return SHC_rv;
  // splicer end class.Buffer.method.getTypeID
}

size_t SIDRE_Buffer_get_num_elements(const SIDRE_Buffer *self)
{
  const axom::sidre::Buffer *SH_this =
    static_cast<const axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.getNumElements
  size_t SHC_rv = SH_this->getNumElements();
  return SHC_rv;
  // splicer end class.Buffer.method.getNumElements
}

size_t SIDRE_Buffer_get_total_bytes(const SIDRE_Buffer *self)
{
  const axom::sidre::Buffer *SH_this =
    static_cast<const axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.getTotalBytes
  size_t SHC_rv = SH_this->getTotalBytes();
  return SHC_rv;
  // splicer end class.Buffer.method.getTotalBytes
}

size_t SIDRE_Buffer_get_bytes_per_element(const SIDRE_Buffer *self)
{
  const axom::sidre::Buffer *SH_this =
    static_cast<const axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.getBytesPerElement
  size_t SHC_rv = SH_this->getBytesPerElement();
  return SHC_rv;
  // splicer end class.Buffer.method.getBytesPerElement
}

void SIDRE_Buffer_describe(SIDRE_Buffer *self,
                           SIDRE_TypeID type,
                           SIDRE_IndexType num_elems)
{
  axom::sidre::Buffer *SH_this = static_cast<axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.describe
  axom::sidre::TypeID SHCXX_type = static_cast<axom::sidre::TypeID>(type);
  SH_this->describe(SHCXX_type, num_elems);
  // splicer end class.Buffer.method.describe
}

void SIDRE_Buffer_allocate_existing(SIDRE_Buffer *self)
{
  axom::sidre::Buffer *SH_this = static_cast<axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.allocate_existing
  SH_this->allocate();
  // splicer end class.Buffer.method.allocate_existing
}

void SIDRE_Buffer_allocate_from_type(SIDRE_Buffer *self,
                                     SIDRE_TypeID type,
                                     SIDRE_IndexType num_elems)
{
  axom::sidre::Buffer *SH_this = static_cast<axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.allocate_from_type
  axom::sidre::TypeID SHCXX_type = static_cast<axom::sidre::TypeID>(type);
  SH_this->allocate(SHCXX_type, num_elems);
  // splicer end class.Buffer.method.allocate_from_type
}

void SIDRE_Buffer_reallocate(SIDRE_Buffer *self, SIDRE_IndexType num_elems)
{
  axom::sidre::Buffer *SH_this = static_cast<axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.reallocate
  SH_this->reallocate(num_elems);
  // splicer end class.Buffer.method.reallocate
}

void SIDRE_Buffer_print(const SIDRE_Buffer *self)
{
  const axom::sidre::Buffer *SH_this =
    static_cast<const axom::sidre::Buffer *>(self->addr);
  // splicer begin class.Buffer.method.print
  SH_this->print();
  // splicer end class.Buffer.method.print
}

}  // extern "C"
