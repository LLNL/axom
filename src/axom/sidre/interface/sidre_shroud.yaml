#
# API for Sidre
#
copyright:
  -
  - Copyright (c) 2017-2021, Lawrence Livermore National Security, LLC and
  - other Axom Project Developers. See the top-level LICENSE file for details.
  -
  - "SPDX-License-Identifier: (BSD-3-Clause)"

library: Sidre
# cxx_header: each class has its own header file
namespace: axom sidre

options:
#  debug: True
  C_line_length: 1000
  F_module_per_class: False
  F_module_name_library_template: axom_{library_lower}
#  wrap_python: True

format:
  C_prefix: SIDRE_
  # Any C++ function which returns a string will be wrapped in
  # Fortran as a subroutine with an additional character argument
  # for the result.
#  F_string_result_as_arg: name
  F_filename_suffix: F

declarations:
- decl: typedef int64_t IndexType
  fields:
    # defined in SidreTypes.hpp
    c_header : axom/sidre/interface/SidreTypes.h
    c_type   : SIDRE_IndexType

- decl: typedef int TypeID
  fields:
    # enum for types
    c_header : axom/sidre/interface/SidreTypes.h
    cxx_header : axom/sidre/core/SidreTypes.hpp
    c_to_cxx : axom::sidre::getTypeID({c_var})
    cxx_to_c : static_cast<int>({cxx_var})

# XXX
# parameters:
#  InvalidID: IDTYPE -1

- decl: class Buffer
  cxx_header: axom/sidre/core/Buffer.hpp
  format:
    F_derived_name:  SidreBuffer

- decl: class Group
  # SidreTypes.h is required for C_invalid_name pattern.
  cxx_header: axom/sidre/core/Group.hpp axom/sidre/interface/SidreTypes.h
  format:
    F_derived_name:  SidreGroup

- decl: class View
  cxx_header: axom/sidre/core/View.hpp
  format:
    F_derived_name:  SidreView

  ####################################################################
- decl: class DataStore
  cxx_header: axom/sidre/core/DataStore.hpp
  format:
    F_derived_name:  SidreDataStore

  declarations:
  - decl: DataStore()  +name(new)
  - decl: ~DataStore() +name(delete)
  - decl: Group * getRoot()

  # Methods to query, access, create and destroy Buffers.
  - decl: size_t getNumBuffers() const
#  - decl: bool hasBuffer( IndexType idx ) const
  - decl:  Buffer * getBuffer( IndexType idx )
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none
  - decl: Buffer * createBuffer()
    format:
      function_suffix: _empty
  - decl: Buffer * createBuffer( TypeID type, IndexType num_elems )
    format:
      function_suffix: _from_type
    fortran_generic:
    - decl: (int32_t num_elems)
      function_suffix: _int32_t
    - decl: (int64_t num_elems)
      function_suffix: _int64_t
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none
  - decl: void destroyBuffer( IndexType id )
    fortran_generic:
    - decl: (int32_t id)
      function_suffix: _int32_t
    - decl: (int64_t id)
      function_suffix: _int64_t

  # Method for generateing Blueprint
  - decl: bool generateBlueprintIndex( const std::string& domain_path,
                                       const std::string& mesh_name,
                                       const std::string& index_path,
                                       int num_domains )

  # Methods for iterating over Buffers in DataStore
#  - decl: IndexType getFirstValidBufferIndex() const
#  - decl: IndexType getNextValidBufferIndex(IndexType idx) const;
#    fortran_generic:
#    - decl: (int32_t idx)
#      function_suffix: _int32_t
#    - decl: (int64_t idx)
#      function_suffix: _int64_t

  - decl: void print() const
#  - decl: void print(std::ostream& os) const

  python:
    type: [ init, richcompare ]

####################################################################
- decl: class Group
  declarations:
  # Basic query and accessor methods.
  - decl: IndexType getIndex()
  - decl: const std::string& getName() const +len(MAXNAMESIZE)
  - decl: std::string getPath() const +len(MAXNAMESIZE)
  - decl: std::string getPathName() const +len(MAXNAMESIZE)
#  - decl: Group* getParent()
  - decl: const Group* getParent() const
  - decl: size_t getNumGroups() const
  - decl: size_t getNumViews() const
#  - decl: DataStore* getDataStore() const
  - decl: const DataStore* getDataStore() const

  # View query methods.
  - decl: bool hasView( const string& path ) const
  - decl: bool hasChildView( const string& name ) const
#  - decl: bool hasView( IndexType idx ) const
#    fortran_generic:
#    - decl: (int32_t idx)
#      function_suffix: _int32_t
#    - decl: (int64_t idx)
#      function_suffix: _int64_t
  - decl: IndexType getViewIndex(const std::string &name) const
  - decl: const std::string& getViewName(IndexType idx) const +len(MAXNAMESIZE)
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t
    C_error_pattern: C_invalid_name
    PY_error_pattern: PY_invalid_name_idx

  # View access and iteration methods.
  - decl: View *getView( const std::string& path )
    format:
      function_suffix: _from_name
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none
#  - decl: View const * getView( const std::string& path ) const
  - decl: View *getView( const IndexType idx )
    format:
      function_suffix: _from_index
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none
#  - decl: View const *getView( const IndexType idx ) const
#    fortran_generic:
#    - decl: (int32_t idx)
#      function_suffix: _int32_t
#    - decl: (int64_t idx)
#      function_suffix: _int64_t
  - decl: IndexType getFirstValidViewIndex() const
  - decl: IndexType getNextValidViewIndex(IndexType idx) const
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t

  # Methods to create a View that has no associated data.
  - decl: View *createView( const string& path )
    format:
      function_suffix: _empty
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  - decl: View *createView( const std::string& path,
                            TypeID type,
                            IndexType num_elems )
    format:
      function_suffix: _from_type
    fortran_generic:
    - decl: (int32_t num_elems)
      function_suffix: _int32_t
    - decl: (int64_t num_elems)
      function_suffix: _int64_t
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  - decl: View *createView( const std::string& path,
                            TypeID type,
                            int ndims,
                            const IndexType * shape+rank(1))
    format:
      function_suffix: _from_shape
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

#  - decl: View *createView( const std::string& path, const DataType& dtype)

   # Methods to create a View with a Buffer attached.
  - decl: View *createView( const std::string& path,
                            Buffer *buff)
    format:
      function_suffix: _into_buffer
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  - decl: View *createView( const std::string& path,
                            TypeID type,
                            IndexType num_elems,
                            Buffer *buff)
    format:
      function_suffix: _from_type_and_buffer
    fortran_generic:
    - decl: (int32_t num_elems)
      function_suffix: _int32_t
    - decl: (int64_t num_elems)
      function_suffix: _int64_t
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  - decl: View *createView( const std::string& path,
                            TypeID type,
                            int ndims,
                            const IndexType * shape+rank(1),
                            Buffer * buff)
    format:
      function_suffix: _from_shape_and_buffer
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  # Methods to create a View with externally-owned data attached.
  - decl: View * createView( const std::string& path,
                             void * external_ptr)
    format:
      function_suffix: _external
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  - decl: View *createView( const std::string& path,
                            TypeID type,
                            IndexType num_elems,
                            void * external_ptr)
    format:
      function_suffix: _from_type_external
    fortran_generic:
    - decl: (int32_t num_elems)
      function_suffix: _int32_t
    - decl: (int64_t num_elems)
      function_suffix: _int64_t
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  - decl: View *createView( const std::string& path,
                            TypeID type,
                            int ndims,
                            const IndexType * shape+rank(1),
                            void * external_ptr)
    format:
      function_suffix: _from_shape_external
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  # Methods to create a View and allocate data for it.
  - decl: View *createViewAndAllocate( const std::string& path,
                                       TypeID type,
                                       IndexType num_elems)
    format:
      function_suffix: _nelems
    fortran_generic:
    - decl: (int32_t num_elems)
      function_suffix: _int32_t
    - decl: (int64_t num_elems)
      function_suffix: _int64_t
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  - decl: View *createViewAndAllocate( const std::string& path,
                                       TypeID type,
                                       int ndims,
                                       const IndexType *shape+rank(1))
    format:
      function_suffix: _shape
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

#  - decl: View *createViewAndAllocate( const std::string& path, const DataType& dtype)

  - decl: |
      template<typename ScalarType>
      View *createViewScalar( const std::string& path, ScalarType value)
    cxx_template:
    - instantiation: <int>
    - instantiation: <long>
    - instantiation: <float>
    - instantiation: <double>
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  - decl: View *createViewString( const std::string& path,
                                  const std::string& value)
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none

  # View destruction methods.
  - decl: void destroyView( const std::string &path )
#  - decl: void destroyView( IndexType idx )
#    fortran_generic:
#    - decl: (int32_t idx)
#      function_suffix: _int32_t
#    - decl: (int64_t idx)
#      function_suffix: _int64_t
#  - decl: void destroyViews()
  - decl: void destroyViewAndData(const std::string &path)
    format:
      function_suffix: _name
  - decl: void destroyViewAndData(IndexType idx)
    format:
      function_suffix: _index
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t
#  - decl: void destroyViewsAndData()

  # View move and copy methods.
  - decl: View *moveView(View *view)
  - decl: View *copyView(View *view)

  # Child Group query methods.
  - decl: bool hasGroup( const string& path )
  - decl: bool hasChildGroup( const string& name )
#  - decl: bool hasGroup( IndexType idx )
#    fortran_generic:
#    - decl: (int32_t idx)
#      function_suffix: _int32_t
#    - decl: (int64_t idx)
#      function_suffix: _int64_t
  - decl: IndexType getGroupIndex(const std::string &name) const
  - decl: const std::string& getGroupName(IndexType idx) const +len(MAXNAMESIZE)
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t
    C_error_pattern: C_invalid_name
    PY_error_pattern: PY_invalid_name_idx

  # Group access and iteration methods.
  - decl: Group * getGroup( const std::string& path )
    format:
      function_suffix: _from_name
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none
#  - decl: Group const * getGroup( const std::string& path ) const
  - decl: Group * getGroup( IndexType idx)
    format:
      function_suffix: _from_index
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none
#  - decl: Group const * getGroup(IndexType idx) const
#    fortran_generic:
#    - decl: (int32_t idx)
#      function_suffix: _int32_t
#    - decl: (int64_t idx)
#      function_suffix: _int64_t
  - decl: IndexType getFirstValidGroupIndex() const
  - decl: IndexType getNextValidGroupIndex(IndexType idx) const
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t

  # Child Group creation and destruction methods.
  - decl: Group *createGroup( const string& path )
    C_error_pattern: C_null_to_error_capsule
    PY_error_pattern: PY_null_to_none
  - decl: void destroyGroup(const std::string &path)
    format:
      function_suffix: _name
  - decl: void destroyGroup(IndexType idx)
    format:
      function_suffix: _index
    fortran_generic:
    - decl: (int32_t idx)
      function_suffix: _int32_t
    - decl: (int64_t idx)
      function_suffix: _int64_t
#  - decl: void destroyGroups()

  # Group move and copy methods
  - decl: Group *moveGroup(Group *grp)
#  - decl: Group *copyGroup(Group *grp)

  # Group print methods.
  - decl: void print() const
#  - decl: void printTree( const int level ) const

#  - decl: void createNativeLayout(Node &) const
  - decl: bool isEquivalentTo(const Group * other) const

  # Group I/O methods
  - decl: void save(const std::string& file_path,
                    const std::string& protocol) const
  - decl: void load(const std::string& file_path,
                    const std::string& protocol,
                    bool preserve_contents = false)
  - decl: void loadExternalData(const std::string& file_path)
#  - decl: void save(const hid_t& h5_id) const
#    format:
#      function_suffix: _hdf
#  - decl: void load(const hid_t& h5_id)
#    format:
#      function_suffix: _hdf

  - decl: bool rename( const string& new_name )

  python:
    type: [ init, richcompare ]

####################################################################
- decl: class Buffer
  declarations:
    # Basic query and accessor methods
    - decl: IndexType getIndex() const
    - decl: size_t getNumViews() const

    # Methods to query and access Buffer data
    - decl: void* getVoidPtr()
    - decl: TypeID getTypeID() const
    - decl: size_t getNumElements() const
    - decl: size_t getTotalBytes() const
    - decl: size_t getBytesPerElement() const

    # Data description and allocation methods
    - decl: Buffer* describe(TypeID type, IndexType num_elems)
      return_this: True
      fortran_generic:
      - decl: (int32_t num_elems)
        function_suffix: _int32_t
      - decl: (int64_t num_elems)
        function_suffix: _int64_t

#    - decl: Buffer* describe(const DataType& dtype)

    - decl: Buffer* allocate()
      format:
        function_suffix: _existing
      return_this: True

    - decl: Buffer* allocate(TypeID type, IndexType num_elems)
      format:
        function_suffix: _from_type
      return_this: True
      fortran_generic:
      - decl: (int32_t num_elems)
        function_suffix: _int32_t
      - decl: (int64_t num_elems)
        function_suffix: _int64_t

    - decl: Buffer* reallocate(IndexType num_elems)
      return_this: True
      fortran_generic:
      - decl: (int32_t num_elems)
        function_suffix: _int32_t
      - decl: (int64_t num_elems)
        function_suffix: _int64_t

    - decl: void print() const

  python:
    type: [ init, richcompare ]

####################################################################
- decl: class View
  declarations:

  # View query and accessor methods
  - decl: IndexType getIndex()
  - decl: const std::string& getName() const +len(MAXNAMESIZE)
  - decl: std::string getPath() const +len(MAXNAMESIZE)
  - decl: std::string getPathName() const +len(MAXNAMESIZE)
  - decl: Group* getOwningGroup()
#  - decl: Group const* getOwningGroup() const
  - decl: bool hasBuffer() const
  - decl: Buffer* getBuffer()
#  - decl: Buffer const* getBuffer() const
  - decl: bool isExternal() const
  - decl: bool isAllocated()
  - decl: bool isApplied() const
  - decl: bool isDescribed() const
  - decl: bool isEmpty() const
  - decl: bool isOpaque() const
  - decl: bool isScalar() const
  - decl: bool isString() const
  - decl: TypeID getTypeID() const
  - decl: size_t getTotalBytes() const
  - decl: size_t getNumElements() const
  - decl: size_t getBytesPerElement() const
  - decl: size_t getOffset() const
  - decl: size_t getStride() const
  - decl: int getNumDimensions() const
  - decl: int getShape(int ndims, IndexType * shape+rank(1)+intent(OUT) ) const
#  - decl: const Schema& getSchema() const
#  - decl: Node& getNode()
#  - decl: const Node& getNode() const

  # View allocation methods
  - decl: View* allocate()
    format:
      function_suffix: _simple
    return_this: True

  - decl: View* allocate(TypeID type, IndexType num_elems)
    format:
      function_suffix: _from_type
    return_this: True
    fortran_generic:
      - decl: (int32_t num_elems)
        function_suffix: _int32_t
      - decl: (int64_t num_elems)
        function_suffix: _int64_t

#  - decl: View* allocate(const DataType& dtype)

  - decl: View * reallocate(IndexType num_elems)
    return_this: True
    fortran_generic:
    - decl: (int32_t num_elems)
      function_suffix: _int32_t
    - decl: (int64_t num_elems)
      function_suffix: _int64_t

#  - decl: View* reallocate(const DataType& dtype)

  # Attach Buffer object to data view.
  - decl: View* attachBuffer(Buffer * buff)
    return_this: True
    format:
      function_suffix: _only

  - decl: View* attachBuffer(TypeID type,
                             IndexType num_elems,
                             Buffer * buff)
    return_this: True
    format:
      function_suffix: _type
    fortran_generic:
    - decl: (int32_t num_elems)
      function_suffix: _int32_t
    - decl: (int64_t num_elems)
      function_suffix: _int64_t

  - decl: View* attachBuffer(TypeID type,
                             int ndims,
                             const IndexType * shape+rank(1),
                             Buffer * buff)
    return_this: True
    format:
      function_suffix: _shape

#  - decl: Buffer * detachBuffer()

  - decl: View* apply()
    return_this: True

  - decl: View* apply(IndexType num_elems,
                      IndexType offset = 0,
                      IndexType stride = 1)
    default_arg_suffix:
      -  _nelems
      -  _nelems_offset
      -  _nelems_offset_stride
    return_this: True

  - decl: View* apply(TypeID type,
                      IndexType num_elems,
                      IndexType offset = 0,
                      IndexType stride = 1)
    default_arg_suffix:
      -  _type_nelems
      -  _type_nelems_offset
      -  _type_nelems_offset_stride
    return_this: True

  - decl: View * apply( TypeID type, int ndims, const IndexType * shape+rank(1) )
    format:
      function_suffix: _type_shape
    return_this: True
#  - decl: View* apply(const DataType& dtype)

   # Methods to set data in a view (scalar, string, or external data).
  - decl: |
      template<typename ScalarType>
      void setScalar(ScalarType value)
    cxx_template:
    - instantiation: <int>
    - instantiation: <long>
    - instantiation: <float>
    - instantiation: <double>

  - decl: View * setString(const std::string& value)
    return_this: True

  - decl: View * setExternalDataPtr(void * external_ptr)
    return_this: True
    format:
      function_suffix: _only

  - decl: View * setExternalDataPtr(TypeID type,
                                    IndexType num_elems,
                                    void * external_ptr)
    return_this: True
    format:
      function_suffix: _type
    fortran_generic:
    - decl: (int32_t num_elems)
      function_suffix: _int32_t
    - decl: (int64_t num_elems)
      function_suffix: _int64_t

  - decl: View * setExternalDataPtr(TypeID type,
                                    int ndims,
                                    const IndexType * shape+rank(1),
                                    void * external_ptr)
    return_this: True
    format:
      function_suffix: _shape

  # Methods to retrieve data in a view.
  - decl: const char * getString() +len(MAXNAMESIZE)
    format:
      F_string_result_as_arg: name

  - decl: |
      template<typename DataType>
      DataType getData()
    cxx_template:
    - instantiation: <int>
    - instantiation: <long>
    - instantiation: <float>
    - instantiation: <double>

  - decl: void * getVoidPtr() const

  # print methods
  - decl: void print() const
#  - decl: void createNativeLayout(Node &) const
  - decl: bool rename( const string& new_name ) 

  python:
    type: [ init, richcompare ]


######################################################################

- decl: bool nameIsValid(const std::string& name)
   # The concept of a valid name is different for C++, C and Fortran
  options:
    F_string_len_trim: false
  splicer:
    c:
    - "return name != NULL;"
    f:
    - 'SHT_rv = name .ne. " "'


######################################################################
patterns:
    C_invalid_name: |
        if (! axom::sidre::nameIsValid({cxx_var})) {{
            return SIDRE_InvalidName;
        }}
    # return a blank field string if an error occurs
    C_invalid_name_buf: |
        if (! axom::sidre::nameIsValid({cxx_var})) {{
            std::memset({c_var}, ' ', {c_var_len});
            return;
        }}
    # Fill in capsule then return NULL instead of pointer to capsule.
    C_null_to_error_capsule: |
        if ({cxx_var} == nullptr) {{
            {c_var}->addr = NULL;
            {c_var}->idtor = 0; 
            return NULL;
        }}
    PY_invalid_name: |
        if (! axom::sidre::nameIsValid({cxx_var})) {{
            PyErr_SetString(PyExc_KeyError, "XXX - need name");
            return NULL;
        }}
    # report the invalid index, assume local variable idx
    PY_invalid_name_idx: |
        if (! axom::sidre::nameIsValid({cxx_var})) {{
            Py_RETURN_NONE;
        }}
#        PyErr_SetObject(PyExc_KeyError, PyInt_FromLong(idx));
#        return NULL;
    # Convert NULL to None
    PY_null_to_none: |
        if ({cxx_var} == nullptr) {{
            Py_RETURN_NONE;
        }}



# Files which contain code to be inserted into generated code
splicer:
  c:
  -  c_fortran/csidresplicer.c
  f:
  -  c_fortran/fsidresplicer.f
  -  genfsidresplicer.f
