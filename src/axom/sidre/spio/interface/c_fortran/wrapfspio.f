! wrapfspio.f
! This file is generated by Shroud 0.13.0. Do not edit.
!
! Copyright (c) 2017-2024, Lawrence Livermore National Security, LLC and
! other Axom Project Developers. See the top-level LICENSE file for details.
!
! SPDX-License-Identifier: (BSD-3-Clause)
!>
!! \file wrapfspio.f
!! \brief Shroud generated wrapper for sidre namespace
!<
! splicer begin file_top
! splicer end file_top
module axom_spio
    use iso_c_binding, only : C_INT, C_NULL_PTR, C_PTR
    ! splicer begin module_use
    ! splicer end module_use
    implicit none

    ! splicer begin module_top
    ! splicer end module_top

    ! helper capsule_data_helper
    type, bind(C) :: SPIO_SHROUD_capsule_data
        type(C_PTR) :: addr = C_NULL_PTR  ! address of C++ memory
        integer(C_INT) :: idtor = 0       ! index of destructor
    end type SPIO_SHROUD_capsule_data

    type iomanager
        type(SPIO_SHROUD_capsule_data) :: cxxmem
        ! splicer begin class.IOManager.component_part
        ! splicer end class.IOManager.component_part
    contains
        procedure :: delete => io_manager_delete
        procedure :: write_0 => io_manager_write_0
        procedure :: write_1 => io_manager_write_1
        procedure :: write_group_to_root_file => io_manager_write_group_to_root_file
        procedure :: write_blueprint_index_to_root_file => io_manager_write_blueprint_index_to_root_file
        procedure :: read_0 => io_manager_read_0
        procedure :: read_1 => io_manager_read_1
        procedure :: read_2 => io_manager_read_2
        procedure :: read_3 => io_manager_read_3
        procedure :: load_external_data => io_manager_load_external_data
        procedure :: get_instance => io_manager_get_instance
        procedure :: set_instance => io_manager_set_instance
        procedure :: associated => io_manager_associated
        generic :: read => read_0, read_1, read_2, read_3
        generic :: write => write_0, write_1
        ! splicer begin class.IOManager.type_bound_procedure_part
        ! splicer end class.IOManager.type_bound_procedure_part
    end type iomanager

    interface operator (.eq.)
        module procedure io_manager_eq
    end interface

    interface operator (.ne.)
        module procedure io_manager_ne
    end interface

    interface

        function c_io_manager_ctor_default(com, SHT_rv) &
                result(SHT_prv) &
                bind(C, name="SPIO_IOManager_ctor_default")
            use iso_c_binding, only : C_INT, C_PTR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            integer(C_INT), value, intent(IN) :: com
            type(SPIO_SHROUD_capsule_data), intent(OUT) :: SHT_rv
            type(C_PTR) SHT_prv
        end function c_io_manager_ctor_default

        function c_io_manager_ctor_usescr(com, use_scr, SHT_rv) &
                result(SHT_prv) &
                bind(C, name="SPIO_IOManager_ctor_usescr")
            use iso_c_binding, only : C_BOOL, C_INT, C_PTR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            integer(C_INT), value, intent(IN) :: com
            logical(C_BOOL), value, intent(IN) :: use_scr
            type(SPIO_SHROUD_capsule_data), intent(OUT) :: SHT_rv
            type(C_PTR) SHT_prv
        end function c_io_manager_ctor_usescr

        subroutine c_io_manager_delete(self) &
                bind(C, name="SPIO_IOManager_delete")
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(INOUT) :: self
        end subroutine c_io_manager_delete

        subroutine c_io_manager_write_0(self, group, num_files, &
                file_string, protocol) &
                bind(C, name="SPIO_IOManager_write_0")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            integer(C_INT), value, intent(IN) :: num_files
            character(kind=C_CHAR), intent(IN) :: file_string(*)
            character(kind=C_CHAR), intent(IN) :: protocol(*)
        end subroutine c_io_manager_write_0

        subroutine c_io_manager_write_0_bufferify(self, group, &
                num_files, file_string, SHT_file_string_len, protocol, &
                SHT_protocol_len) &
                bind(C, name="SPIO_IOManager_write_0_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            integer(C_INT), value, intent(IN) :: num_files
            character(kind=C_CHAR), intent(IN) :: file_string(*)
            integer(C_INT), value, intent(IN) :: SHT_file_string_len
            character(kind=C_CHAR), intent(IN) :: protocol(*)
            integer(C_INT), value, intent(IN) :: SHT_protocol_len
        end subroutine c_io_manager_write_0_bufferify

        subroutine c_io_manager_write_1(self, group, num_files, &
                file_string, protocol, tree_pattern) &
                bind(C, name="SPIO_IOManager_write_1")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            integer(C_INT), value, intent(IN) :: num_files
            character(kind=C_CHAR), intent(IN) :: file_string(*)
            character(kind=C_CHAR), intent(IN) :: protocol(*)
            character(kind=C_CHAR), intent(IN) :: tree_pattern(*)
        end subroutine c_io_manager_write_1

        subroutine c_io_manager_write_1_bufferify(self, group, &
                num_files, file_string, SHT_file_string_len, protocol, &
                SHT_protocol_len, tree_pattern, SHT_tree_pattern_len) &
                bind(C, name="SPIO_IOManager_write_1_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            integer(C_INT), value, intent(IN) :: num_files
            character(kind=C_CHAR), intent(IN) :: file_string(*)
            integer(C_INT), value, intent(IN) :: SHT_file_string_len
            character(kind=C_CHAR), intent(IN) :: protocol(*)
            integer(C_INT), value, intent(IN) :: SHT_protocol_len
            character(kind=C_CHAR), intent(IN) :: tree_pattern(*)
            integer(C_INT), value, intent(IN) :: SHT_tree_pattern_len
        end subroutine c_io_manager_write_1_bufferify

        subroutine c_io_manager_write_group_to_root_file(self, group, &
                file_name) &
                bind(C, name="SPIO_IOManager_writeGroupToRootFile")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: file_name(*)
        end subroutine c_io_manager_write_group_to_root_file

        subroutine c_io_manager_write_group_to_root_file_bufferify(self, &
                group, file_name, SHT_file_name_len) &
                bind(C, name="SPIO_IOManager_writeGroupToRootFile_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: file_name(*)
            integer(C_INT), value, intent(IN) :: SHT_file_name_len
        end subroutine c_io_manager_write_group_to_root_file_bufferify

        subroutine c_io_manager_write_blueprint_index_to_root_file(self, &
                datastore, domain_path, file_name, mesh_path) &
                bind(C, name="SPIO_IOManager_writeBlueprintIndexToRootFile")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: datastore
            character(kind=C_CHAR), intent(IN) :: domain_path(*)
            character(kind=C_CHAR), intent(IN) :: file_name(*)
            character(kind=C_CHAR), intent(IN) :: mesh_path(*)
        end subroutine c_io_manager_write_blueprint_index_to_root_file

        subroutine c_io_manager_write_blueprint_index_to_root_file_bufferify( &
                self, datastore, domain_path, SHT_domain_path_len, &
                file_name, SHT_file_name_len, mesh_path, &
                SHT_mesh_path_len) &
                bind(C, name="SPIO_IOManager_writeBlueprintIndexToRootFile_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: datastore
            character(kind=C_CHAR), intent(IN) :: domain_path(*)
            integer(C_INT), value, intent(IN) :: SHT_domain_path_len
            character(kind=C_CHAR), intent(IN) :: file_name(*)
            integer(C_INT), value, intent(IN) :: SHT_file_name_len
            character(kind=C_CHAR), intent(IN) :: mesh_path(*)
            integer(C_INT), value, intent(IN) :: SHT_mesh_path_len
        end subroutine c_io_manager_write_blueprint_index_to_root_file_bufferify

        subroutine c_io_manager_read_0(self, group, file_string, &
                protocol) &
                bind(C, name="SPIO_IOManager_read_0")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: file_string(*)
            character(kind=C_CHAR), intent(IN) :: protocol(*)
        end subroutine c_io_manager_read_0

        subroutine c_io_manager_read_0_bufferify(self, group, &
                file_string, SHT_file_string_len, protocol, &
                SHT_protocol_len) &
                bind(C, name="SPIO_IOManager_read_0_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: file_string(*)
            integer(C_INT), value, intent(IN) :: SHT_file_string_len
            character(kind=C_CHAR), intent(IN) :: protocol(*)
            integer(C_INT), value, intent(IN) :: SHT_protocol_len
        end subroutine c_io_manager_read_0_bufferify

        subroutine c_io_manager_read_1(self, group, file_string, &
                protocol, preserve_contents) &
                bind(C, name="SPIO_IOManager_read_1")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_BOOL, C_CHAR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: file_string(*)
            character(kind=C_CHAR), intent(IN) :: protocol(*)
            logical(C_BOOL), value, intent(IN) :: preserve_contents
        end subroutine c_io_manager_read_1

        subroutine c_io_manager_read_1_bufferify(self, group, &
                file_string, SHT_file_string_len, protocol, &
                SHT_protocol_len, preserve_contents) &
                bind(C, name="SPIO_IOManager_read_1_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_BOOL, C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: file_string(*)
            integer(C_INT), value, intent(IN) :: SHT_file_string_len
            character(kind=C_CHAR), intent(IN) :: protocol(*)
            integer(C_INT), value, intent(IN) :: SHT_protocol_len
            logical(C_BOOL), value, intent(IN) :: preserve_contents
        end subroutine c_io_manager_read_1_bufferify

        subroutine c_io_manager_read_2(self, group, root_file) &
                bind(C, name="SPIO_IOManager_read_2")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: root_file(*)
        end subroutine c_io_manager_read_2

        subroutine c_io_manager_read_2_bufferify(self, group, root_file, &
                SHT_root_file_len) &
                bind(C, name="SPIO_IOManager_read_2_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: root_file(*)
            integer(C_INT), value, intent(IN) :: SHT_root_file_len
        end subroutine c_io_manager_read_2_bufferify

        subroutine c_io_manager_read_3(self, group, root_file, &
                preserve_contents) &
                bind(C, name="SPIO_IOManager_read_3")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_BOOL, C_CHAR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: root_file(*)
            logical(C_BOOL), value, intent(IN) :: preserve_contents
        end subroutine c_io_manager_read_3

        subroutine c_io_manager_read_3_bufferify(self, group, root_file, &
                SHT_root_file_len, preserve_contents) &
                bind(C, name="SPIO_IOManager_read_3_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_BOOL, C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: root_file(*)
            integer(C_INT), value, intent(IN) :: SHT_root_file_len
            logical(C_BOOL), value, intent(IN) :: preserve_contents
        end subroutine c_io_manager_read_3_bufferify

        subroutine c_io_manager_load_external_data(self, group, &
                root_file) &
                bind(C, name="SPIO_IOManager_loadExternalData")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: root_file(*)
        end subroutine c_io_manager_load_external_data

        subroutine c_io_manager_load_external_data_bufferify(self, &
                group, root_file, SHT_root_file_len) &
                bind(C, name="SPIO_IOManager_loadExternalData_bufferify")
            use axom_sidre, only : SIDRE_SHROUD_capsule_data
            use iso_c_binding, only : C_CHAR, C_INT
            import :: SPIO_SHROUD_capsule_data
            implicit none
            type(SPIO_SHROUD_capsule_data), intent(IN) :: self
            type(SIDRE_SHROUD_capsule_data), intent(INOUT) :: group
            character(kind=C_CHAR), intent(IN) :: root_file(*)
            integer(C_INT), value, intent(IN) :: SHT_root_file_len
        end subroutine c_io_manager_load_external_data_bufferify
    end interface

    interface io_manager_read
        module procedure io_manager_read_0
        module procedure io_manager_read_1
        module procedure io_manager_read_2
        module procedure io_manager_read_3
    end interface io_manager_read

    interface io_manager_write
        module procedure io_manager_write_0
        module procedure io_manager_write_1
    end interface io_manager_write

    interface iomanager
        module procedure io_manager_ctor_default
        module procedure io_manager_ctor_usescr
    end interface iomanager

    ! splicer begin additional_declarations
    ! splicer end additional_declarations

contains

    function io_manager_ctor_default(com) &
            result(SHT_rv)
        use iso_c_binding, only : C_PTR
        integer, value, intent(IN) :: com
        type(iomanager) :: SHT_rv
        type(C_PTR) :: SHT_prv
        ! splicer begin class.IOManager.method.ctor_default
        SHT_prv = c_io_manager_ctor_default(com, SHT_rv%cxxmem)
        ! splicer end class.IOManager.method.ctor_default
    end function io_manager_ctor_default

    function io_manager_ctor_usescr(com, use_scr) &
            result(SHT_rv)
        use iso_c_binding, only : C_BOOL, C_PTR
        integer, value, intent(IN) :: com
        logical, value, intent(IN) :: use_scr
        type(iomanager) :: SHT_rv
        type(C_PTR) :: SHT_prv
        ! splicer begin class.IOManager.method.ctor_usescr
        logical(C_BOOL) SH_use_scr
        SH_use_scr = use_scr  ! coerce to C_BOOL
        SHT_prv = c_io_manager_ctor_usescr(com, SH_use_scr, &
            SHT_rv%cxxmem)
        ! splicer end class.IOManager.method.ctor_usescr
    end function io_manager_ctor_usescr

    subroutine io_manager_delete(obj)
        class(iomanager) :: obj
        ! splicer begin class.IOManager.method.delete
        call c_io_manager_delete(obj%cxxmem)
        ! splicer end class.IOManager.method.delete
    end subroutine io_manager_delete

    subroutine io_manager_write_0(obj, group, num_files, file_string, &
            protocol)
        use axom_sidre, only : SidreGroup
        use iso_c_binding, only : C_INT
        class(iomanager) :: obj
        type(SidreGroup), intent(INOUT) :: group
        integer(C_INT), value, intent(IN) :: num_files
        character(len=*), intent(IN) :: file_string
        character(len=*), intent(IN) :: protocol
        ! splicer begin class.IOManager.method.write_0
        integer(C_INT) SHT_file_string_len
        integer(C_INT) SHT_protocol_len
        SHT_file_string_len = len(file_string, kind=C_INT)
        SHT_protocol_len = len(protocol, kind=C_INT)
        call c_io_manager_write_0_bufferify(obj%cxxmem, group%cxxmem, &
            num_files, file_string, SHT_file_string_len, protocol, &
            SHT_protocol_len)
        ! splicer end class.IOManager.method.write_0
    end subroutine io_manager_write_0

    subroutine io_manager_write_1(obj, group, num_files, file_string, &
            protocol, tree_pattern)
        use axom_sidre, only : SidreGroup
        use iso_c_binding, only : C_INT
        class(iomanager) :: obj
        type(SidreGroup), intent(INOUT) :: group
        integer(C_INT), value, intent(IN) :: num_files
        character(len=*), intent(IN) :: file_string
        character(len=*), intent(IN) :: protocol
        character(len=*), intent(IN) :: tree_pattern
        ! splicer begin class.IOManager.method.write_1
        integer(C_INT) SHT_file_string_len
        integer(C_INT) SHT_protocol_len
        integer(C_INT) SHT_tree_pattern_len
        SHT_file_string_len = len(file_string, kind=C_INT)
        SHT_protocol_len = len(protocol, kind=C_INT)
        SHT_tree_pattern_len = len(tree_pattern, kind=C_INT)
        call c_io_manager_write_1_bufferify(obj%cxxmem, group%cxxmem, &
            num_files, file_string, SHT_file_string_len, protocol, &
            SHT_protocol_len, tree_pattern, SHT_tree_pattern_len)
        ! splicer end class.IOManager.method.write_1
    end subroutine io_manager_write_1

    subroutine io_manager_write_group_to_root_file(obj, group, &
            file_name)
        use axom_sidre, only : SidreGroup
        use iso_c_binding, only : C_INT
        class(iomanager) :: obj
        type(SidreGroup), intent(INOUT) :: group
        character(len=*), intent(IN) :: file_name
        ! splicer begin class.IOManager.method.write_group_to_root_file
        integer(C_INT) SHT_file_name_len
        SHT_file_name_len = len(file_name, kind=C_INT)
        call c_io_manager_write_group_to_root_file_bufferify(obj%cxxmem, &
            group%cxxmem, file_name, SHT_file_name_len)
        ! splicer end class.IOManager.method.write_group_to_root_file
    end subroutine io_manager_write_group_to_root_file

    subroutine io_manager_write_blueprint_index_to_root_file(obj, &
            datastore, domain_path, file_name, mesh_path)
        use axom_sidre, only : SidreDataStore
        use iso_c_binding, only : C_INT
        class(iomanager) :: obj
        type(SidreDataStore), intent(INOUT) :: datastore
        character(len=*), intent(IN) :: domain_path
        character(len=*), intent(IN) :: file_name
        character(len=*), intent(IN) :: mesh_path
        ! splicer begin class.IOManager.method.write_blueprint_index_to_root_file
        integer(C_INT) SHT_domain_path_len
        integer(C_INT) SHT_file_name_len
        integer(C_INT) SHT_mesh_path_len
        SHT_domain_path_len = len(domain_path, kind=C_INT)
        SHT_file_name_len = len(file_name, kind=C_INT)
        SHT_mesh_path_len = len(mesh_path, kind=C_INT)
        call c_io_manager_write_blueprint_index_to_root_file_bufferify(obj%cxxmem, &
            datastore%cxxmem, domain_path, SHT_domain_path_len, &
            file_name, SHT_file_name_len, mesh_path, SHT_mesh_path_len)
        ! splicer end class.IOManager.method.write_blueprint_index_to_root_file
    end subroutine io_manager_write_blueprint_index_to_root_file

    subroutine io_manager_read_0(obj, group, file_string, protocol)
        use axom_sidre, only : SidreGroup
        use iso_c_binding, only : C_INT
        class(iomanager) :: obj
        type(SidreGroup), intent(INOUT) :: group
        character(len=*), intent(IN) :: file_string
        character(len=*), intent(IN) :: protocol
        ! splicer begin class.IOManager.method.read_0
        integer(C_INT) SHT_file_string_len
        integer(C_INT) SHT_protocol_len
        SHT_file_string_len = len(file_string, kind=C_INT)
        SHT_protocol_len = len(protocol, kind=C_INT)
        call c_io_manager_read_0_bufferify(obj%cxxmem, group%cxxmem, &
            file_string, SHT_file_string_len, protocol, &
            SHT_protocol_len)
        ! splicer end class.IOManager.method.read_0
    end subroutine io_manager_read_0

    subroutine io_manager_read_1(obj, group, file_string, protocol, &
            preserve_contents)
        use axom_sidre, only : SidreGroup
        use iso_c_binding, only : C_BOOL, C_INT
        class(iomanager) :: obj
        type(SidreGroup), intent(INOUT) :: group
        character(len=*), intent(IN) :: file_string
        character(len=*), intent(IN) :: protocol
        logical, value, intent(IN) :: preserve_contents
        ! splicer begin class.IOManager.method.read_1
        integer(C_INT) SHT_file_string_len
        integer(C_INT) SHT_protocol_len
        logical(C_BOOL) SH_preserve_contents
        SHT_file_string_len = len(file_string, kind=C_INT)
        SHT_protocol_len = len(protocol, kind=C_INT)
        SH_preserve_contents = preserve_contents  ! coerce to C_BOOL
        call c_io_manager_read_1_bufferify(obj%cxxmem, group%cxxmem, &
            file_string, SHT_file_string_len, protocol, &
            SHT_protocol_len, SH_preserve_contents)
        ! splicer end class.IOManager.method.read_1
    end subroutine io_manager_read_1

    subroutine io_manager_read_2(obj, group, root_file)
        use axom_sidre, only : SidreGroup
        use iso_c_binding, only : C_INT
        class(iomanager) :: obj
        type(SidreGroup), intent(INOUT) :: group
        character(len=*), intent(IN) :: root_file
        ! splicer begin class.IOManager.method.read_2
        integer(C_INT) SHT_root_file_len
        SHT_root_file_len = len(root_file, kind=C_INT)
        call c_io_manager_read_2_bufferify(obj%cxxmem, group%cxxmem, &
            root_file, SHT_root_file_len)
        ! splicer end class.IOManager.method.read_2
    end subroutine io_manager_read_2

    subroutine io_manager_read_3(obj, group, root_file, &
            preserve_contents)
        use axom_sidre, only : SidreGroup
        use iso_c_binding, only : C_BOOL, C_INT
        class(iomanager) :: obj
        type(SidreGroup), intent(INOUT) :: group
        character(len=*), intent(IN) :: root_file
        logical, value, intent(IN) :: preserve_contents
        ! splicer begin class.IOManager.method.read_3
        integer(C_INT) SHT_root_file_len
        logical(C_BOOL) SH_preserve_contents
        SHT_root_file_len = len(root_file, kind=C_INT)
        SH_preserve_contents = preserve_contents  ! coerce to C_BOOL
        call c_io_manager_read_3_bufferify(obj%cxxmem, group%cxxmem, &
            root_file, SHT_root_file_len, SH_preserve_contents)
        ! splicer end class.IOManager.method.read_3
    end subroutine io_manager_read_3

    subroutine io_manager_load_external_data(obj, group, root_file)
        use axom_sidre, only : SidreGroup
        use iso_c_binding, only : C_INT
        class(iomanager) :: obj
        type(SidreGroup), intent(INOUT) :: group
        character(len=*), intent(IN) :: root_file
        ! splicer begin class.IOManager.method.load_external_data
        integer(C_INT) SHT_root_file_len
        SHT_root_file_len = len(root_file, kind=C_INT)
        call c_io_manager_load_external_data_bufferify(obj%cxxmem, &
            group%cxxmem, root_file, SHT_root_file_len)
        ! splicer end class.IOManager.method.load_external_data
    end subroutine io_manager_load_external_data

    ! Return pointer to C++ memory.
    function io_manager_get_instance(obj) result (cxxptr)
        use iso_c_binding, only: C_PTR
        class(iomanager), intent(IN) :: obj
        type(C_PTR) :: cxxptr
        cxxptr = obj%cxxmem%addr
    end function io_manager_get_instance

    subroutine io_manager_set_instance(obj, cxxmem)
        use iso_c_binding, only: C_PTR
        class(iomanager), intent(INOUT) :: obj
        type(C_PTR), intent(IN) :: cxxmem
        obj%cxxmem%addr = cxxmem
        obj%cxxmem%idtor = 0
    end subroutine io_manager_set_instance

    function io_manager_associated(obj) result (rv)
        use iso_c_binding, only: c_associated
        class(iomanager), intent(IN) :: obj
        logical rv
        rv = c_associated(obj%cxxmem%addr)
    end function io_manager_associated

    ! splicer begin class.IOManager.additional_functions
    ! splicer end class.IOManager.additional_functions

    ! splicer begin additional_functions
    ! splicer end additional_functions

    function io_manager_eq(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(iomanager), intent(IN) ::a,b
        logical :: rv
        if (c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function io_manager_eq

    function io_manager_ne(a,b) result (rv)
        use iso_c_binding, only: c_associated
        type(iomanager), intent(IN) ::a,b
        logical :: rv
        if (.not. c_associated(a%cxxmem%addr, b%cxxmem%addr)) then
            rv = .true.
        else
            rv = .false.
        endif
    end function io_manager_ne

end module axom_spio
