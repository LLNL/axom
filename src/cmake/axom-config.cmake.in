# Copyright (c) 2017-2024, Lawrence Livermore National Security, LLC and
# other Axom Project Developers. See the top-level LICENSE file for details.
#
# SPDX-License-Identifier: (BSD-3-Clause)
#------------------------------------------------------------------------------

cmake_minimum_required(VERSION 3.8 FATAL_ERROR)

@PACKAGE_INIT@

if(NOT AXOM_FOUND)

  #----------------------------------------------------------------------------
  # Set version and paths
  #----------------------------------------------------------------------------
  
  set(AXOM_VERSION          "@AXOM_VERSION_FULL@")
  set(AXOM_VERSION_MAJOR    "@AXOM_VERSION_MAJOR@")
  set(AXOM_VERSION_MINOR    "@AXOM_VERSION_MINOR@")
  set(AXOM_VERSION_PATCH    "@AXOM_VERSION_PATCH@")
  
  set(AXOM_GIT_SHA          "@AXOM_GIT_SHA@")

  set(AXOM_INSTALL_PREFIX   "@AXOM_INSTALL_PREFIX@")
  set(AXOM_INCLUDE_DIRS     "${AXOM_INSTALL_PREFIX}/include")
  
  #----------------------------------------------------------------------------
  # Set user configuration options and features
  #----------------------------------------------------------------------------

  # Language features
  set(AXOM_ENABLE_FORTRAN     "@ENABLE_FORTRAN@")
  set(AXOM_USE_CUDA           "@AXOM_USE_CUDA@")
  set(AXOM_USE_HIP            "@AXOM_USE_HIP@")
  set(AXOM_USE_MPI            "@AXOM_USE_MPI@")
  set(AXOM_USE_OPENMP         "@AXOM_USE_OPENMP@")

  # Axom components
  set(AXOM_COMPONENTS_ENABLED @AXOM_COMPONENTS_ENABLED@)

  set(AXOM_ENABLE_INLET       "@AXOM_ENABLE_INLET@")
  set(AXOM_ENABLE_KLEE        "@AXOM_ENABLE_KLEE@")
  set(AXOM_ENABLE_LUMBERJACK  "@AXOM_ENABLE_LUMBERJACK@")
  set(AXOM_ENABLE_MINT        "@AXOM_ENABLE_MINT@")
  set(AXOM_ENABLE_PRIMAL      "@AXOM_ENABLE_PRIMAL@")
  set(AXOM_ENABLE_QUEST       "@AXOM_ENABLE_QUEST@")
  set(AXOM_ENABLE_SIDRE       "@AXOM_ENABLE_SIDRE@")
  set(AXOM_ENABLE_SLAM        "@AXOM_ENABLE_SLAM@")
  set(AXOM_ENABLE_SLIC        "@AXOM_ENABLE_SLIC@")
  set(AXOM_ENABLE_SPIN        "@AXOM_ENABLE_SPIN@")

  # Axom built-in TPLs
  set(AXOM_USE_CLI11          "@AXOM_USE_CLI11@")
  set(AXOM_USE_FMT            "@AXOM_USE_FMT@")
  set(AXOM_USE_SOL            "@AXOM_USE_SOL@")
  set(AXOM_USE_SPARSEHASH     "@AXOM_USE_SPARSEHASH@")

  # Axom external TPLs
  set(AXOM_USE_ADIAK          "@AXOM_USE_ADIAK@")
  set(AXOM_USE_C2C            "@AXOM_USE_C2C@")
  set(AXOM_USE_CALIPER        "@AXOM_USE_CALIPER@")
  set(AXOM_USE_CAMP           "@AXOM_USE_CAMP@")
  set(AXOM_USE_CONDUIT        "@AXOM_USE_CONDUIT@")
  set(AXOM_USE_HDF5           "@AXOM_USE_HDF5@")
  set(AXOM_USE_LUA            "@AXOM_USE_LUA@")
  set(AXOM_USE_MFEM           "@AXOM_USE_MFEM@")
  set(AXOM_USE_RAJA           "@AXOM_USE_RAJA@")
  set(AXOM_USE_SCR            "@AXOM_USE_SCR@")
  set(AXOM_USE_UMPIRE         "@AXOM_USE_UMPIRE@")

  # Configration for Axom compiler defines
  set(AXOM_DEBUG_DEFINE         "@AXOM_DEBUG_DEFINE@")
  set(AXOM_DEBUG_DEFINE_STRING  "@AXOM_DEBUG_DEFINE_STRING@")

  #----------------------------------------------------------------------------
  # Bring in required dependencies for this axom configuration
  #----------------------------------------------------------------------------
  include(CMakeFindDependencyMacro)

  # Enable various find commands to look in non-default paths
  set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS TRUE)
  set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS TRUE)
  set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIBX32_PATHS TRUE)

  # adiak
  if(AXOM_USE_ADIAK)
    set(AXOM_ADIAK_DIR     "@ADIAK_DIR@")
    if(NOT ADIAK_DIR) 
      set(ADIAK_DIR ${AXOM_ADIAK_DIR})
    endif()
    find_dependency(adiak REQUIRED 
                    PATHS "${ADIAK_DIR}"
                          "${ADIAK_DIR}/lib/cmake/adiak")
  endif()

  # c2c
  if(AXOM_USE_C2C)
    set(AXOM_C2C_DIR     "@C2C_DIR@")
    # Note: Targets not currently imported
  endif()

  # caliper
  if(AXOM_USE_CALIPER)
    set(AXOM_CALIPER_DIR   "@CALIPER_DIR@")
    if(NOT CALIPER_DIR) 
      set(CALIPER_DIR ${AXOM_CALIPER_DIR})
    endif()
    find_dependency(caliper REQUIRED 
                    PATHS "${CALIPER_DIR}"
                          "${CALIPER_DIR}/share/cmake/caliper")
  endif()

  # camp
  if(AXOM_USE_CAMP)
    set(AXOM_CAMP_DIR      "@CAMP_DIR@")
    if(NOT CAMP_DIR)
      set(CAMP_DIR ${AXOM_CAMP_DIR})
    endif()
    find_dependency(camp REQUIRED PATHS "${CAMP_DIR}")
  endif()

  # umpire
  if(AXOM_USE_UMPIRE)
    set(AXOM_UMPIRE_DIR   "@UMPIRE_DIR@")
    if(NOT UMPIRE_DIR)
      set(UMPIRE_DIR ${AXOM_UMPIRE_DIR})
    endif()
    find_dependency(umpire REQUIRED PATHS "${UMPIRE_DIR}")
  endif()

  # raja
  if(AXOM_USE_RAJA)
    set(AXOM_RAJA_DIR     "@RAJA_DIR@")
    if(NOT RAJA_DIR)
      set(RAJA_DIR ${AXOM_RAJA_DIR})
    endif()
    find_dependency(RAJA REQUIRED PATHS "${RAJA_DIR}")
  endif()

  # conduit
  if(AXOM_USE_CONDUIT)
    set(AXOM_CONDUIT_DIR  "@CONDUIT_DIR@")
    if(NOT CONDUIT_DIR) 
      set(CONDUIT_DIR ${AXOM_CONDUIT_DIR}) 
    endif()

    # Load mpi targets because we require the optional Conduit mpi targets
    if(AXOM_USE_MPI)
      find_package(MPI REQUIRED)
    endif()

    find_dependency(Conduit REQUIRED
                    PATHS "${CONDUIT_DIR}"
                          "${CONDUIT_DIR}/lib/cmake/conduit")
  endif()

  # hdf5
  if(AXOM_USE_HDF5)
    set(AXOM_HDF5_DIR     "@HDF5_DIR@")
    # Note: 'hdf5" target is exported as 'axom::hdf5'
  endif()

  # lua
  if(AXOM_USE_LUA)
    set(AXOM_LUA_DIR     "@LUA_DIR@")
    # Note: 'lua" target is exported as 'axom::lua'
  endif()

  # mfem
  if(AXOM_USE_MFEM)
    set(AXOM_MFEM_DIR     "@MFEM_DIR@")
    # Note: 'mfem" target is exported as 'axom::mfem'
  endif()

  # scr
  if(AXOM_USE_SCR)
    set(AXOM_SCR_DIR      "@SCR_DIR@")
    # Note: 'scr" target is exported as 'axom::scr'
  endif()

  #----------------------------------------------------------------------------
  # Include targets exported by cmake
  #----------------------------------------------------------------------------
  get_filename_component(AXOM_CMAKE_CONFIG_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
  get_filename_component(_IMPORT_PREFIX "${AXOM_CMAKE_CONFIG_DIR}" PATH)

  if(_IMPORT_PREFIX STREQUAL "/")
    set(_IMPORT_PREFIX "")
  endif()

  # we want the import root, which is right above the "lib" prefix
  get_filename_component(_IMPORT_ROOT "${_IMPORT_PREFIX}" PATH)

  include(${AXOM_CMAKE_CONFIG_DIR}/BLTSetupTargets.cmake)
  include(${AXOM_CMAKE_CONFIG_DIR}/axom-targets.cmake)

  # Create convenience target that bundles all Axom targets (axom)
  add_library(axom INTERFACE IMPORTED)

  set_property(TARGET axom
               APPEND PROPERTY
               INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_ROOT}/include/")

  foreach(_component ${AXOM_COMPONENTS_ENABLED})
    set_property(TARGET axom
                 PROPERTY INTERFACE_LINK_LIBRARIES
                 axom::${_component}
                 APPEND)
  endforeach()

  #---------------------------------------------------------------------------
  # Remove non-existant INTERFACE_INCLUDE_DIRECTORIES from imported targets
  # to work around CMake error
  #---------------------------------------------------------------------------

  # Support IN_LIST operator for if()
  # Policy added in 3.3+
  if(POLICY CMP0057)
    cmake_policy(SET CMP0057 NEW)
  endif()

  ## axom_find_target_dependencies(TARGET <target> TLIST <list name>)
  ##
  ## Store all targets' dependencies (link libraries and interface link libraries)
  ## recursively in the variable name TLIST holds.
  macro(axom_find_target_dependencies)

      set(options)
      set(singleValuedArgs TARGET TLIST)
      set(multiValuedArgs)

      # parse the arguments to the macro
      cmake_parse_arguments(arg
           "${options}" "${singleValuedArgs}" "${multiValuedArgs}" ${ARGN})

      # check for required arguments
      if(NOT DEFINED arg_TARGET)
          message(FATAL_ERROR "TARGET is a required parameter for the axom_find_target_dependencies macro")
      endif()

      if(NOT DEFINED arg_TLIST OR NOT DEFINED ${arg_TLIST})
          message(FATAL_ERROR "TLIST is a required parameter for the axom_find_target_dependencies macro")
      endif()

      set(_depends_on "")

      # Get dependencies if BLT registered library
      string(TOUPPER ${arg_TARGET} _target_upper)
      if(_BLT_${_target_upper}_IS_REGISTERED_LIBRARY)
          list(APPEND _depends_on "${_BLT_${_target_upper}_DEPENDS_ON}")
      endif()

      # Get dependencies if CMake target
      if(TARGET ${arg_TARGET})
          get_property(_target_type TARGET ${arg_TARGET} PROPERTY TYPE)
          if(NOT "${_target_type}" STREQUAL "INTERFACE_LIBRARY")
              get_target_property(_propval ${arg_TARGET} LINK_LIBRARIES)
              if(_propval)
                  list(APPEND _depends_on ${_propval})
              endif()
          endif()

          # get interface link libraries
          get_target_property(_propval ${arg_TARGET} INTERFACE_LINK_LIBRARIES)
          if (_propval)
              list(APPEND _depends_on ${_propval})
          endif()
      endif()

      blt_list_remove_duplicates(TO _depends_on)
      foreach(t ${_depends_on})
          if (NOT "${t}" IN_LIST ${arg_TLIST})
              list(APPEND ${arg_TLIST} ${t})
              axom_find_target_dependencies(TARGET ${t} TLIST ${arg_TLIST})
          endif()
      endforeach()

      unset(_depends_on)
  endmacro(axom_find_target_dependencies)

  set(_deps "")
  axom_find_target_dependencies(TARGET axom TLIST _deps)
  list(REMOVE_DUPLICATES _deps)
  message(STATUS "Removing non-existant include directories from Axom's dependencies...")

  foreach(_target ${_deps})
    if(TARGET ${_target})
      get_target_property(_dirs ${_target} INTERFACE_INCLUDE_DIRECTORIES)
      set(_existing_dirs)
      foreach(_dir ${_dirs})
        if (EXISTS "${_dir}")
          list(APPEND _existing_dirs "${_dir}")
        endif()
      endforeach()
      if (_existing_dirs)
        set_target_properties(${_target} PROPERTIES
                              INTERFACE_INCLUDE_DIRECTORIES "${_existing_dirs}" )
      endif()
    endif()
  endforeach()

  #----------------------------------------------------------------------------
  # Indicate that Axom is correctly set up
  #----------------------------------------------------------------------------
  set(AXOM_FOUND TRUE)

endif()
