--- CLI11.hpp	2024-10-28 16:39:59.708552000 -0700
+++ CLI11_new.hpp	2024-10-28 17:10:57.111210000 -0700
@@ -1,3 +1,5 @@
+#pragma once
+
 // CLI11: Version 2.4.2
 // Originally designed by Henry Schreiner
 // https://github.com/CLIUtils/CLI11
@@ -31,8 +33,6 @@
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 // SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-#pragma once
-
 // Standard combined includes:
 #include <algorithm>
 #include <array>
@@ -249,6 +249,7 @@
 #include <shellapi.h>
 #endif
 
+namespace axom {
 
 namespace CLI {
 
@@ -288,7 +289,7 @@
             return;
         }
     }
-    throw std::runtime_error("CLI::narrow: could not set locale to C.UTF-8");
+    throw std::runtime_error("axom::CLI::narrow: could not set locale to C.UTF-8");
 }
 
 template <typename F> struct scope_guard_t {
@@ -327,7 +328,7 @@
 
     std::size_t new_size = std::wcsrtombs(nullptr, &it, 0, &state);
     if(new_size == static_cast<std::size_t>(-1)) {
-        throw std::runtime_error("CLI::narrow: conversion error in std::wcsrtombs at offset " +
+        throw std::runtime_error("axom::CLI::narrow: conversion error in std::wcsrtombs at offset " +
                                  std::to_string(it - str));
     }
     std::string result(new_size, '\0');
@@ -358,7 +359,7 @@
 
     std::size_t new_size = std::mbsrtowcs(nullptr, &it, 0, &state);
     if(new_size == static_cast<std::size_t>(-1)) {
-        throw std::runtime_error("CLI::widen: conversion error in std::mbsrtowcs at offset " +
+        throw std::runtime_error("axom::CLI::widen: conversion error in std::mbsrtowcs at offset " +
                                  std::to_string(it - str));
     }
     std::wstring result(new_size, L'\0');
@@ -1254,7 +1255,7 @@
 /// These codes are part of every error in CLI. They can be obtained from e using e.exit_code or as a quick shortcut,
 /// int values from e.get_error_code().
 enum class ExitCodes {
-    Success = 0,
+    CLI11_Success = 0,
     IncorrectConstruction = 100,
     BadNameString,
     OptionAlreadyAdded,
@@ -1278,7 +1279,7 @@
 /// @defgroup error_group Errors
 /// @brief Errors thrown by CLI11
 ///
-/// These are the errors that can be thrown. Some of them, like CLI::Success, are not really errors.
+/// These are the errors that can be thrown. Some of them, like axom::CLI::CLI11_Success, are not really errors.
 /// @{
 
 /// All errors derive from this one
@@ -1375,29 +1376,29 @@
 // Not really "errors"
 
 /// This is a successful completion on parsing, supposed to exit
-class Success : public ParseError {
-    CLI11_ERROR_DEF(ParseError, Success)
-    Success() : Success("Successfully completed, should be caught and quit", ExitCodes::Success) {}
+class CLI11_Success : public ParseError {
+    CLI11_ERROR_DEF(ParseError, CLI11_Success)
+    CLI11_Success() : CLI11_Success("Successfully completed, should be caught and quit", ExitCodes::CLI11_Success) {}
 };
 
 /// -h or --help on command line
-class CallForHelp : public Success {
-    CLI11_ERROR_DEF(Success, CallForHelp)
-    CallForHelp() : CallForHelp("This should be caught in your main function, see examples", ExitCodes::Success) {}
+class CallForHelp : public CLI11_Success {
+    CLI11_ERROR_DEF(CLI11_Success, CallForHelp)
+    CallForHelp() : CallForHelp("This should be caught in your main function, see examples", ExitCodes::CLI11_Success) {}
 };
 
 /// Usually something like --help-all on command line
-class CallForAllHelp : public Success {
-    CLI11_ERROR_DEF(Success, CallForAllHelp)
+class CallForAllHelp : public CLI11_Success {
+    CLI11_ERROR_DEF(CLI11_Success, CallForAllHelp)
     CallForAllHelp()
-        : CallForAllHelp("This should be caught in your main function, see examples", ExitCodes::Success) {}
+        : CallForAllHelp("This should be caught in your main function, see examples", ExitCodes::CLI11_Success) {}
 };
 
 /// -v or --version on command line
-class CallForVersion : public Success {
-    CLI11_ERROR_DEF(Success, CallForVersion)
+class CallForVersion : public CLI11_Success {
+    CLI11_ERROR_DEF(CLI11_Success, CallForVersion)
     CallForVersion()
-        : CallForVersion("This should be caught in your main function, see examples", ExitCodes::Success) {}
+        : CallForVersion("This should be caught in your main function, see examples", ExitCodes::CLI11_Success) {}
 };
 
 /// Does not output a diagnostic in CLI11_PARSE, but allows main() to return with a specific error code.
@@ -1636,7 +1637,7 @@
 namespace adl_detail {
 /// Check for existence of user-supplied lexical_cast.
 ///
-/// This struct has to be in a separate namespace so that it doesn't see our lexical_cast overloads in CLI::detail.
+/// This struct has to be in a separate namespace so that it doesn't see our lexical_cast overloads in axom::CLI::detail.
 /// Standard says it shouldn't see them if it's defined before the corresponding lexical_cast declarations, but this
 /// requires a working implementation of two-phase lookup, and not all compilers can boast that (msvc, ahem).
 template <typename T, typename S = std::string> class is_lexical_castable {
@@ -1900,7 +1901,7 @@
     }
     std::vector<std::string> defaults;
     while(cval != end) {
-        defaults.emplace_back(CLI::detail::to_string(*cval));
+        defaults.emplace_back(axom::CLI::detail::to_string(*cval));
         ++cval;
     }
     return {"[" + detail::join(defaults) + "]"};
@@ -3827,7 +3828,7 @@
   public:
     explicit TypeValidator(const std::string &validator_name)
         : Validator(validator_name, [](std::string &input_string) {
-              using CLI::detail::lexical_cast;
+              using axom::CLI::detail::lexical_cast;
               auto val = DesiredType();
               if(!lexical_cast(input_string, val)) {
                   return std::string("Failed parsing ") + input_string + " as a " + detail::type_name<DesiredType>();
@@ -3863,7 +3864,7 @@
         }
 
         func_ = [min_val, max_val](std::string &input) {
-            using CLI::detail::lexical_cast;
+            using axom::CLI::detail::lexical_cast;
             T val;
             bool converted = lexical_cast(input, val);
             if((!converted) || (val < min_val || val > max_val)) {
@@ -3901,7 +3902,7 @@
         description(out.str());
 
         func_ = [min_val, max_val](std::string &input) {
-            using CLI::detail::lexical_cast;
+            using axom::CLI::detail::lexical_cast;
             T val;
             bool converted = lexical_cast(input, val);
             if(!converted) {
@@ -4094,7 +4095,7 @@
         // This is the function that validates
         // It stores a copy of the set pointer-like, so shared_ptr will stay alive
         func_ = [set, filter_fn](std::string &input) {
-            using CLI::detail::lexical_cast;
+            using axom::CLI::detail::lexical_cast;
             local_item_t b;
             if(!lexical_cast(input, b)) {
                 throw ValidationError(input);  // name is added later
@@ -4163,7 +4164,7 @@
         desc_function_ = [mapping]() { return detail::generate_map(detail::smart_deref(mapping)); };
 
         func_ = [mapping, filter_fn](std::string &input) {
-            using CLI::detail::lexical_cast;
+            using axom::CLI::detail::lexical_cast;
             local_item_t b;
             if(!lexical_cast(input, b)) {
                 return std::string();
@@ -4233,7 +4234,7 @@
         desc_function_ = tfunc;
 
         func_ = [mapping, tfunc, filter_fn](std::string &input) {
-            using CLI::detail::lexical_cast;
+            using axom::CLI::detail::lexical_cast;
             local_item_t b;
             bool converted = lexical_cast(input, b);
             if(converted) {
@@ -4337,7 +4338,7 @@
                 unit = detail::to_lower(unit);
             }
             if(unit.empty()) {
-                using CLI::detail::lexical_cast;
+                using axom::CLI::detail::lexical_cast;
                 if(!lexical_cast(input, num)) {
                     throw ValidationError(std::string("Value ") + input + " could not be converted to " +
                                           detail::type_name<Number>());
@@ -4356,7 +4357,7 @@
             }
 
             if(!input.empty()) {
-                using CLI::detail::lexical_cast;
+                using axom::CLI::detail::lexical_cast;
                 bool converted = lexical_cast(input, num);
                 if(!converted) {
                     throw ValidationError(std::string("Value ") + input + " could not be converted to " +
@@ -4660,13 +4661,13 @@
 
 CLI11_INLINE IPV4Validator::IPV4Validator() : Validator("IPV4") {
     func_ = [](std::string &ip_addr) {
-        auto result = CLI::detail::split(ip_addr, '.');
+        auto result = axom::CLI::detail::split(ip_addr, '.');
         if(result.size() != 4) {
             return std::string("Invalid IPV4 address must have four parts (") + ip_addr + ')';
         }
         int num = 0;
         for(const auto &var : result) {
-            using CLI::detail::lexical_cast;
+            using axom::CLI::detail::lexical_cast;
             bool retval = lexical_cast(var, num);
             if(!retval) {
                 return std::string("Failed parsing number (") + var + ')';
@@ -4829,7 +4830,7 @@
 /// This is the minimum requirements to run a formatter.
 ///
 /// A user can subclass this is if they do not care at all
-/// about the structure in CLI::Formatter.
+/// about the structure in axom::CLI::Formatter.
 class FormatterBase {
   protected:
     /// @name Options
@@ -5725,7 +5726,7 @@
                 _validate_results(results_);
                 current_option_state_ = old_option_state;
             }
-        } catch(const CLI::Error &) {
+        } catch(const axom::CLI::Error &) {
             // this should be done
             results_ = std::move(old_results);
             current_option_state_ = old_option_state;
@@ -6258,8 +6259,8 @@
         if(type_size_max_ > 1) {  // in this context index refers to the index in the type
             int index = 0;
             if(get_items_expected_max() < static_cast<int>(res.size()) &&
-               (multi_option_policy_ == CLI::MultiOptionPolicy::TakeLast ||
-                multi_option_policy_ == CLI::MultiOptionPolicy::Reverse)) {
+               (multi_option_policy_ == axom::CLI::MultiOptionPolicy::TakeLast ||
+                multi_option_policy_ == axom::CLI::MultiOptionPolicy::Reverse)) {
                 // create a negative index for the earliest ones
                 index = get_items_expected_max() - static_cast<int>(res.size());
             }
@@ -6277,8 +6278,8 @@
         } else {
             int index = 0;
             if(expected_max_ < static_cast<int>(res.size()) &&
-               (multi_option_policy_ == CLI::MultiOptionPolicy::TakeLast ||
-                multi_option_policy_ == CLI::MultiOptionPolicy::Reverse)) {
+               (multi_option_policy_ == axom::CLI::MultiOptionPolicy::TakeLast ||
+                multi_option_policy_ == axom::CLI::MultiOptionPolicy::Reverse)) {
                 // create a negative index for the earliest ones
                 index = expected_max_ - static_cast<int>(res.size());
             }
@@ -6398,7 +6399,7 @@
        result.back() == ']') {  // this is now a vector string likely from the default or user entry
         result.pop_back();
 
-        for(auto &var : CLI::detail::split(result.substr(1), ',')) {
+        for(auto &var : axom::CLI::detail::split(result.substr(1), ',')) {
             if(!var.empty()) {
                 result_count += _add_result(std::move(var), res);
             }
@@ -6410,7 +6411,7 @@
         ++result_count;
     } else {
         if((result.find_first_of(delimiter_) != std::string::npos)) {
-            for(const auto &var : CLI::detail::split(result, delimiter_)) {
+            for(const auto &var : axom::CLI::detail::split(result, delimiter_)) {
                 if(!var.empty()) {
                     res.push_back(var);
                     ++result_count;
@@ -6430,7 +6431,7 @@
 #define CLI11_PARSE(app, ...)                                                                                          \
     try {                                                                                                              \
         (app).parse(__VA_ARGS__);                                                                                      \
-    } catch(const CLI::ParseError &e) {                                                                                \
+    } catch(const axom::CLI::ParseError &e) {                                                                                \
         return (app).exit(e);                                                                                          \
     }
 #endif
@@ -6919,12 +6920,12 @@
                        AssignTo &variable,  ///< The variable to set
                        std::string option_description = "") {
 
-        auto fun = [&variable](const CLI::results_t &res) {  // comment for spacing
+        auto fun = [&variable](const axom::CLI::results_t &res) {  // comment for spacing
             return detail::lexical_conversion<AssignTo, ConvertTo>(res, variable);
         };
 
         Option *opt = add_option(option_name, fun, option_description, false, [&variable]() {
-            return CLI::detail::checked_to_string<AssignTo, ConvertTo>(variable);
+            return axom::CLI::detail::checked_to_string<AssignTo, ConvertTo>(variable);
         });
         opt->type_name(detail::type_name<ConvertTo>());
         // these must be actual lvalues since (std::max) sometimes is defined in terms of references and references
@@ -6943,7 +6944,7 @@
                                  AssignTo &variable,  ///< The variable to set
                                  std::string option_description = "") {
 
-        auto fun = [&variable](const CLI::results_t &res) {  // comment for spacing
+        auto fun = [&variable](const axom::CLI::results_t &res) {  // comment for spacing
             return detail::lexical_conversion<AssignTo, AssignTo>(res, variable);
         };
 
@@ -6961,7 +6962,7 @@
                                 const std::function<void(const ArgType &)> &func,  ///< the callback to execute
                                 std::string option_description = "") {
 
-        auto fun = [func](const CLI::results_t &res) {
+        auto fun = [func](const axom::CLI::results_t &res) {
             ArgType variable;
             bool result = detail::lexical_conversion<ArgType, ArgType>(res, variable);
             if(result) {
@@ -6979,7 +6980,7 @@
 
     /// Add option with no description or variable assignment
     Option *add_option(std::string option_name) {
-        return add_option(option_name, CLI::callback_t{}, std::string{}, false);
+        return add_option(option_name, axom::CLI::callback_t{}, std::string{}, false);
     }
 
     /// Add option with description but with no variable assignment or callback
@@ -6987,7 +6988,7 @@
               enable_if_t<std::is_const<T>::value && std::is_constructible<std::string, T>::value, detail::enabler> =
                   detail::dummy>
     Option *add_option(std::string option_name, T &option_description) {
-        return add_option(option_name, CLI::callback_t(), option_description, false);
+        return add_option(option_name, axom::CLI::callback_t(), option_description, false);
     }
 
     /// Set a help flag, replace the existing one if present
@@ -7008,11 +7009,11 @@
 
   private:
     /// Internal function for adding a flag
-    Option *_add_flag_internal(std::string flag_name, CLI::callback_t fun, std::string flag_description);
+    Option *_add_flag_internal(std::string flag_name, axom::CLI::callback_t fun, std::string flag_description);
 
   public:
     /// Add a flag with no description or variable assignment
-    Option *add_flag(std::string flag_name) { return _add_flag_internal(flag_name, CLI::callback_t(), std::string{}); }
+    Option *add_flag(std::string flag_name) { return _add_flag_internal(flag_name, axom::CLI::callback_t(), std::string{}); }
 
     /// Add flag with description but with no variable assignment or callback
     /// takes a constant string,  if a variable string is passed that variable will be assigned the results from the
@@ -7021,7 +7022,7 @@
               enable_if_t<std::is_const<T>::value && std::is_constructible<std::string, T>::value, detail::enabler> =
                   detail::dummy>
     Option *add_flag(std::string flag_name, T &flag_description) {
-        return _add_flag_internal(flag_name, CLI::callback_t(), flag_description);
+        return _add_flag_internal(flag_name, axom::CLI::callback_t(), flag_description);
     }
 
     /// Other type version accepts all other types that are not vectors such as bool, enum, string or other classes
@@ -7034,8 +7035,8 @@
                      T &flag_result,  ///< A variable holding the flag result
                      std::string flag_description = "") {
 
-        CLI::callback_t fun = [&flag_result](const CLI::results_t &res) {
-            using CLI::detail::lexical_cast;
+        axom::CLI::callback_t fun = [&flag_result](const axom::CLI::results_t &res) {
+            using axom::CLI::detail::lexical_cast;
             return lexical_cast(res[0], flag_result);
         };
         auto *opt = _add_flag_internal(flag_name, std::move(fun), std::move(flag_description));
@@ -7049,10 +7050,10 @@
     Option *add_flag(std::string flag_name,
                      std::vector<T> &flag_results,  ///< A vector of values with the flag results
                      std::string flag_description = "") {
-        CLI::callback_t fun = [&flag_results](const CLI::results_t &res) {
+        axom::CLI::callback_t fun = [&flag_results](const axom::CLI::results_t &res) {
             bool retval = true;
             for(const auto &elem : res) {
-                using CLI::detail::lexical_cast;
+                using axom::CLI::detail::lexical_cast;
                 flag_results.emplace_back();
                 retval &= lexical_cast(elem, flag_results.back());
             }
@@ -7113,7 +7114,7 @@
     App *add_subcommand(std::string subcommand_name = "", std::string subcommand_description = "");
 
     /// Add a previously created app as a subcommand
-    App *add_subcommand(CLI::App_p subcom);
+    App *add_subcommand(axom::CLI::App_p subcom);
 
     /// Removes a subcommand from the App. Takes a subcommand pointer. Returns true if found and removed.
     bool remove_subcommand(App *subcom);
@@ -7133,13 +7134,13 @@
     CLI11_NODISCARD App *get_subcommand(int index = 0) const;
 
     /// Check to see if a subcommand is part of this command and get a shared_ptr to it
-    CLI::App_p get_subcommand_ptr(App *subcom) const;
+    axom::CLI::App_p get_subcommand_ptr(App *subcom) const;
 
     /// Check to see if a subcommand is part of this command (text version)
-    CLI11_NODISCARD CLI::App_p get_subcommand_ptr(std::string subcom) const;
+    CLI11_NODISCARD axom::CLI::App_p get_subcommand_ptr(std::string subcom) const;
 
     /// Get an owning pointer to subcommand by index
-    CLI11_NODISCARD CLI::App_p get_subcommand_ptr(int index = 0) const;
+    CLI11_NODISCARD axom::CLI::App_p get_subcommand_ptr(int index = 0) const;
 
     /// Check to see if an option group is part of this App
     CLI11_NODISCARD App *get_option_group(std::string group_name) const;
@@ -8073,7 +8074,7 @@
     // Empty name will simply remove the version flag
     if(!flag_name.empty()) {
         version_ptr_ = add_flag_callback(
-            flag_name, [versionString]() { throw(CLI::CallForVersion(versionString, 0)); }, version_help);
+            flag_name, [versionString]() { throw(axom::CLI::CallForVersion(versionString, 0)); }, version_help);
         version_ptr_->configurable(false);
     }
 
@@ -8090,14 +8091,14 @@
     // Empty name will simply remove the version flag
     if(!flag_name.empty()) {
         version_ptr_ =
-            add_flag_callback(flag_name, [vfunc]() { throw(CLI::CallForVersion(vfunc(), 0)); }, version_help);
+            add_flag_callback(flag_name, [vfunc]() { throw(axom::CLI::CallForVersion(vfunc(), 0)); }, version_help);
         version_ptr_->configurable(false);
     }
 
     return version_ptr_;
 }
 
-CLI11_INLINE Option *App::_add_flag_internal(std::string flag_name, CLI::callback_t fun, std::string flag_description) {
+CLI11_INLINE Option *App::_add_flag_internal(std::string flag_name, axom::CLI::callback_t fun, std::string flag_description) {
     Option *opt = nullptr;
     if(detail::has_default_flag_values(flag_name)) {
         // check for default values and if it has them
@@ -8126,8 +8127,8 @@
                                             std::function<void(void)> function,  ///< A function to call, void(void)
                                             std::string flag_description) {
 
-    CLI::callback_t fun = [function](const CLI::results_t &res) {
-        using CLI::detail::lexical_cast;
+    axom::CLI::callback_t fun = [function](const axom::CLI::results_t &res) {
+        using axom::CLI::detail::lexical_cast;
         bool trigger{false};
         auto result = lexical_cast(res[0], trigger);
         if(result && trigger) {
@@ -8143,8 +8144,8 @@
                        std::function<void(std::int64_t)> function,  ///< A function to call, void(int)
                        std::string flag_description) {
 
-    CLI::callback_t fun = [function](const CLI::results_t &res) {
-        using CLI::detail::lexical_cast;
+    axom::CLI::callback_t fun = [function](const axom::CLI::results_t &res) {
+        using axom::CLI::detail::lexical_cast;
         std::int64_t flag_count{0};
         lexical_cast(res[0], flag_count);
         function(flag_count);
@@ -8218,11 +8219,11 @@
             }
         }
     }
-    CLI::App_p subcom = std::shared_ptr<App>(new App(std::move(subcommand_description), subcommand_name, this));
+    axom::CLI::App_p subcom = std::shared_ptr<App>(new App(std::move(subcommand_description), subcommand_name, this));
     return add_subcommand(std::move(subcom));
 }
 
-CLI11_INLINE App *App::add_subcommand(CLI::App_p subcom) {
+CLI11_INLINE App *App::add_subcommand(axom::CLI::App_p subcom) {
     if(!subcom)
         throw IncorrectConstruction("passed App is not valid");
     auto *ckapp = (name_.empty() && parent_ != nullptr) ? _get_fallthrough_parent() : this;
@@ -8280,7 +8281,7 @@
     throw OptionNotFound(std::to_string(index));
 }
 
-CLI11_INLINE CLI::App_p App::get_subcommand_ptr(App *subcom) const {
+CLI11_INLINE axom::CLI::App_p App::get_subcommand_ptr(App *subcom) const {
     if(subcom == nullptr)
         throw OptionNotFound("nullptr passed");
     for(const App_p &subcomptr : subcommands_)
@@ -8289,14 +8290,14 @@
     throw OptionNotFound(subcom->get_name());
 }
 
-CLI11_NODISCARD CLI11_INLINE CLI::App_p App::get_subcommand_ptr(std::string subcom) const {
+CLI11_NODISCARD CLI11_INLINE axom::CLI::App_p App::get_subcommand_ptr(std::string subcom) const {
     for(const App_p &subcomptr : subcommands_)
         if(subcomptr->check_name(subcom))
             return subcomptr;
     throw OptionNotFound(subcom);
 }
 
-CLI11_NODISCARD CLI11_INLINE CLI::App_p App::get_subcommand_ptr(int index) const {
+CLI11_NODISCARD CLI11_INLINE axom::CLI::App_p App::get_subcommand_ptr(int index) const {
     if(index >= 0) {
         auto uindex = static_cast<unsigned>(index);
         if(uindex < subcommands_.size())
@@ -8305,7 +8306,7 @@
     throw OptionNotFound(std::to_string(index));
 }
 
-CLI11_NODISCARD CLI11_INLINE CLI::App *App::get_option_group(std::string group_name) const {
+CLI11_NODISCARD CLI11_INLINE axom::CLI::App *App::get_option_group(std::string group_name) const {
     for(const App_p &app : subcommands_) {
         if(app->name_.empty() && app->group_ == group_name) {
             return app.get();
@@ -8394,7 +8395,7 @@
     try {
         detail::remove_quotes(args);
     } catch(const std::invalid_argument &arg) {
-        throw CLI::ParseError(arg.what(), CLI::ExitCodes::InvalidError);
+        throw axom::CLI::ParseError(arg.what(), axom::CLI::ExitCodes::InvalidError);
     }
     std::reverse(args.begin(), args.end());
     parse(std::move(args));
@@ -8455,7 +8456,7 @@
 
 CLI11_INLINE int App::exit(const Error &e, std::ostream &out, std::ostream &err) const {
 
-    /// Avoid printing anything if this is a CLI::RuntimeError
+    /// Avoid printing anything if this is a axom::CLI::RuntimeError
     if(e.get_name() == "RuntimeError")
         return e.get_exit_code();
 
@@ -8474,7 +8475,7 @@
         return e.get_exit_code();
     }
 
-    if(e.get_exit_code() != static_cast<int>(ExitCodes::Success)) {
+    if(e.get_exit_code() != static_cast<int>(ExitCodes::CLI11_Success)) {
         if(failure_message_)
             err << failure_message_(this, e) << std::flush;
     }
@@ -8572,7 +8573,7 @@
         version_ptr_->add_result("true");
         try {
             version_ptr_->run_callback();
-        } catch(const CLI::CallForVersion &cfv) {
+        } catch(const axom::CLI::CallForVersion &cfv) {
             val = cfv.what();
         }
         version_ptr_->clear();
@@ -9126,7 +9127,7 @@
         }
 
         if(sub->required_ && sub->count_all() == 0) {
-            throw(CLI::RequiredError(sub->get_display_name()));
+            throw(axom::CLI::RequiredError(sub->get_display_name()));
         }
     }
 }
@@ -9139,7 +9140,7 @@
 
         // process env shouldn't throw but no reason to process it if config generated an error
         _process_env();
-    } catch(const CLI::FileError &) {
+    } catch(const axom::CLI::FileError &) {
         // callbacks and help_flags can generate exceptions which should take priority
         // over the config file error if one exists.
         _process_callbacks();
@@ -9533,7 +9534,7 @@
     }
 
     if(positionals_at_end_) {
-        throw CLI::ExtrasError(name_, args);
+        throw axom::CLI::ExtrasError(name_, args);
     }
     /// If this is an option group don't deal with it
     if(parent_ != nullptr && name_.empty()) {
@@ -10144,7 +10145,7 @@
     }
     // floating point conversion can convert some hex codes, but don't try that here
     if(arg.compare(0, 2, "0x") != 0 && arg.compare(0, 2, "0X") != 0) {
-        using CLI::detail::lexical_cast;
+        using axom::CLI::detail::lexical_cast;
         double val = 0.0;
         if(lexical_cast(arg, val)) {
             if(arg.find_first_not_of("0123456789.-+eE") == std::string::npos) {
@@ -10240,7 +10241,7 @@
     try {
         detail::remove_quotes(parents);
     } catch(const std::invalid_argument &iarg) {
-        throw CLI::ParseError(iarg.what(), CLI::ExitCodes::InvalidError);
+        throw axom::CLI::ParseError(iarg.what(), axom::CLI::ExitCodes::InvalidError);
     }
     return parents;
 }
@@ -10449,7 +10450,7 @@
                             try {
                                 item = detail::remove_escaped_characters(item);
                             } catch(const std::invalid_argument &iarg) {
-                                throw CLI::ParseError(iarg.what(), CLI::ExitCodes::InvalidError);
+                                throw axom::CLI::ParseError(iarg.what(), axom::CLI::ExitCodes::InvalidError);
                             }
                         }
                     } else {
@@ -10498,7 +10499,7 @@
                 detail::process_quoted_string(it, stringQuote, literalQuote);
             }
         } catch(const std::invalid_argument &ia) {
-            throw CLI::ParseError(ia.what(), CLI::ExitCodes::InvalidError);
+            throw axom::CLI::ParseError(ia.what(), axom::CLI::ExitCodes::InvalidError);
         }
 
         if(parents.size() > maximumLayers) {
@@ -10621,14 +10622,14 @@
                     if(!opt->get_fnames().empty()) {
                         try {
                             value = opt->get_flag_value(single_name, value);
-                        } catch(const CLI::ArgumentMismatch &) {
+                        } catch(const axom::CLI::ArgumentMismatch &) {
                             bool valid{false};
                             for(const auto &test_name : opt->get_fnames()) {
                                 try {
                                     value = opt->get_flag_value(test_name, value);
                                     single_name = test_name;
                                     valid = true;
-                                } catch(const CLI::ArgumentMismatch &) {
+                                } catch(const axom::CLI::ArgumentMismatch &) {
                                     continue;
                                 }
                             }
@@ -10822,7 +10823,7 @@
 
     // Add a marker if subcommands are expected or optional
     if(!app->get_subcommands(
-               [](const CLI::App *subc) { return ((!subc->get_disabled()) && (!subc->get_name().empty())); })
+               [](const axom::CLI::App *subc) { return ((!subc->get_disabled()) && (!subc->get_name().empty())); })
             .empty()) {
         out << " " << (app->get_require_subcommand_min() == 0 ? "[" : "")
             << get_label(app->get_require_subcommand_max() < 2 || app->get_require_subcommand_min() > 1 ? "SUBCOMMAND"
@@ -10996,3 +10997,5 @@
 
 
 } // namespace CLI
+
+} // namespace axom
